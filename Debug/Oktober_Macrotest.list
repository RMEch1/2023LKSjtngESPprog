
Oktober_Macrotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003934  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf0  08003cf0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf0  08003cf0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf0  08003cf0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000060  08003d58  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003d58  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004bd8  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b6  00000000  00000000  00024ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a0  00000000  00000000  00026160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000041c  00000000  00000000  00026700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001720c  00000000  00000000  00026b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007364  00000000  00000000  0003dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084fd0  00000000  00000000  0004508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019dc  00000000  00000000  000ca05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000cba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a28 	.word	0x08003a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003a28 	.word	0x08003a28

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_lcd_write_4bit>:
  * @param  data: nilai 4-bit data yang dikirim
  * 		rs_state: kondisi pin RS untuk set mode
  *
  * @retval None
  */
void _lcd_write_4bit(uint8_t data, uint8_t rs_state) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	460a      	mov	r2, r1
 800016a:	71fb      	strb	r3, [r7, #7]
 800016c:	4613      	mov	r3, r2
 800016e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	4826      	ldr	r0, [pc, #152]	; (8000210 <_lcd_write_4bit+0xb0>)
 8000176:	f002 fa24 	bl	80025c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, rs_state);
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	461a      	mov	r2, r3
 800017e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000182:	4823      	ldr	r0, [pc, #140]	; (8000210 <_lcd_write_4bit+0xb0>)
 8000184:	f002 fa1d 	bl	80025c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	08db      	lsrs	r3, r3, #3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	f003 0301 	and.w	r3, r3, #1
 8000192:	b2db      	uxtb	r3, r3
 8000194:	461a      	mov	r2, r3
 8000196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019a:	481d      	ldr	r0, [pc, #116]	; (8000210 <_lcd_write_4bit+0xb0>)
 800019c:	f002 fa11 	bl	80025c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	089b      	lsrs	r3, r3, #2
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	f003 0301 	and.w	r3, r3, #1
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	461a      	mov	r2, r3
 80001ae:	2101      	movs	r1, #1
 80001b0:	4817      	ldr	r0, [pc, #92]	; (8000210 <_lcd_write_4bit+0xb0>)
 80001b2:	f002 fa06 	bl	80025c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	085b      	lsrs	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	f003 0301 	and.w	r3, r3, #1
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	461a      	mov	r2, r3
 80001c4:	2180      	movs	r1, #128	; 0x80
 80001c6:	4813      	ldr	r0, [pc, #76]	; (8000214 <_lcd_write_4bit+0xb4>)
 80001c8:	f002 f9fb 	bl	80025c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f003 0301 	and.w	r3, r3, #1
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	461a      	mov	r2, r3
 80001d6:	2140      	movs	r1, #64	; 0x40
 80001d8:	480e      	ldr	r0, [pc, #56]	; (8000214 <_lcd_write_4bit+0xb4>)
 80001da:	f002 f9f2 	bl	80025c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	; 0x40
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <_lcd_write_4bit+0xb0>)
 80001e4:	f002 f9ed 	bl	80025c2 <HAL_GPIO_WritePin>

	uint16_t i = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	81fb      	strh	r3, [r7, #14]
	while(i < 7200) i++;
 80001ec:	e002      	b.n	80001f4 <_lcd_write_4bit+0x94>
 80001ee:	89fb      	ldrh	r3, [r7, #14]
 80001f0:	3301      	adds	r3, #1
 80001f2:	81fb      	strh	r3, [r7, #14]
 80001f4:	89fb      	ldrh	r3, [r7, #14]
 80001f6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80001fa:	d3f8      	bcc.n	80001ee <_lcd_write_4bit+0x8e>

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2140      	movs	r1, #64	; 0x40
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <_lcd_write_4bit+0xb0>)
 8000202:	f002 f9de 	bl	80025c2 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010c00 	.word	0x40010c00
 8000214:	40010800 	.word	0x40010800

08000218 <_lcd_write_cmd>:
  *
  * @param  cmd: command 8-bit yang akan dikirim
  *
  * @retval None
  */
void _lcd_write_cmd(uint8_t cmd) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	_lcd_write_4bit(((cmd>>4)&0x0f), 0);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f7ff ff98 	bl	8000160 <_lcd_write_4bit>
	_lcd_write_4bit((cmd&0x0f), 0);
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	f003 030f 	and.w	r3, r3, #15
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f7ff ff90 	bl	8000160 <_lcd_write_4bit>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <_lcd_write_data>:
  *
  * @param  data: data karakter 8-bit yang akan dikirim
  *
  * @retval None
  */
void _lcd_write_data(uint8_t cmd) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	_lcd_write_4bit(((cmd>>4)&0x0f), 1);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	091b      	lsrs	r3, r3, #4
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff80 	bl	8000160 <_lcd_write_4bit>
	_lcd_write_4bit((cmd&0x0f), 1);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	f003 030f 	and.w	r3, r3, #15
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2101      	movs	r1, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff78 	bl	8000160 <_lcd_write_4bit>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <LCD_Init>:
  *
  * @param  None
  *
  * @retval None
  */
void LCD_Init(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//	Wait for stable Vcc..
	HAL_Delay(50);
 800027c:	2032      	movs	r0, #50	; 0x32
 800027e:	f001 faa5 	bl	80017cc <HAL_Delay>

	//	See datasheet..
	//	Set 4-bits
	_lcd_write_cmd(0x33);
 8000282:	2033      	movs	r0, #51	; 0x33
 8000284:	f7ff ffc8 	bl	8000218 <_lcd_write_cmd>
	_lcd_write_cmd(0x32);
 8000288:	2032      	movs	r0, #50	; 0x32
 800028a:	f7ff ffc5 	bl	8000218 <_lcd_write_cmd>

	//	Set 4-bit, normal font
	_lcd_write_cmd(0x28);
 800028e:	2028      	movs	r0, #40	; 0x28
 8000290:	f7ff ffc2 	bl	8000218 <_lcd_write_cmd>
	//	Set display off, cursor and blink off
	_lcd_write_cmd(0x08);
 8000294:	2008      	movs	r0, #8
 8000296:	f7ff ffbf 	bl	8000218 <_lcd_write_cmd>

	//	Set entry mode increment
	_lcd_write_cmd(0x06);
 800029a:	2006      	movs	r0, #6
 800029c:	f7ff ffbc 	bl	8000218 <_lcd_write_cmd>
	//	Set display on, cursor and blink off
	_lcd_write_cmd(0x0C);
 80002a0:	200c      	movs	r0, #12
 80002a2:	f7ff ffb9 	bl	8000218 <_lcd_write_cmd>

	//	Init end, clear entire display
	_lcd_write_cmd(0x01);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ffb6 	bl	8000218 <_lcd_write_cmd>
	HAL_Delay(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f001 fa8d 	bl	80017cc <HAL_Delay>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <LCD_SetCursor>:
  * @param  x: posisi kursor pada baris (0-19)
  * 		y: posisi kursor pada kolom (0-3)
  *
  * @retval None
  */
void LCD_SetCursor(uint8_t pos_x, uint8_t pos_y) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	460a      	mov	r2, r1
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71bb      	strb	r3, [r7, #6]
	uint8_t col = 0x80;
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	73fb      	strb	r3, [r7, #15]
	switch (pos_y)
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d819      	bhi.n	8000306 <LCD_SetCursor+0x4e>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <LCD_SetCursor+0x20>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000307 	.word	0x08000307
 80002dc:	080002e9 	.word	0x080002e9
 80002e0:	080002f3 	.word	0x080002f3
 80002e4:	080002fd 	.word	0x080002fd
	{
	case 0:
		col |= 0x00;
		break;
	case 1:
		col |= 0x40;
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	73fb      	strb	r3, [r7, #15]
		break;
 80002f0:	e009      	b.n	8000306 <LCD_SetCursor+0x4e>
	case 2:
		col |= 0x14;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0314 	orr.w	r3, r3, #20
 80002f8:	73fb      	strb	r3, [r7, #15]
		break;
 80002fa:	e004      	b.n	8000306 <LCD_SetCursor+0x4e>
	case 3:
		col |= 0x54;
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8000302:	73fb      	strb	r3, [r7, #15]
		break;
 8000304:	bf00      	nop
	}
	col += pos_x;
 8000306:	7bfa      	ldrb	r2, [r7, #15]
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4413      	add	r3, r2
 800030c:	73fb      	strb	r3, [r7, #15]
	_lcd_write_cmd(col);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff81 	bl	8000218 <_lcd_write_cmd>
}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop

08000320 <LCD_SetBacklight>:
  *
  * @param  state: 0 = off, 1 = on.
  *
  * @retval None
  */
void LCD_SetBacklight(_Bool state) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, state);
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	461a      	mov	r2, r3
 800032e:	2120      	movs	r1, #32
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <LCD_SetBacklight+0x20>)
 8000332:	f002 f946 	bl	80025c2 <HAL_GPIO_WritePin>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010c00 	.word	0x40010c00

08000344 <LCD_Print>:
  *			atau
  *			LCD_Print(lcd_buffer) jika lcd_buffer adalah char[]
  *
  * @retval None
  */
void LCD_Print(char *str) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	static char *strs = NULL;
	if(strs == NULL || strcmp(strs,str)!=0){
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <LCD_Print+0x48>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d010      	beq.n	8000376 <LCD_Print+0x32>
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <LCD_Print+0x48>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff fef6 	bl	800014c <strcmp>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d00b      	beq.n	800037e <LCD_Print+0x3a>
		while (*str) _lcd_write_data (*str++);
 8000366:	e006      	b.n	8000376 <LCD_Print+0x32>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff69 	bl	8000248 <_lcd_write_data>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f4      	bne.n	8000368 <LCD_Print+0x24>
	}
	strs = str;
 800037e:	4a03      	ldr	r2, [pc, #12]	; (800038c <LCD_Print+0x48>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000010c 	.word	0x2000010c

08000390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

 HAL_Init();
 8000394:	f001 f9b8 	bl	8001708 <HAL_Init>
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 SystemClock_Config();
 8000398:	f000 fa38 	bl	800080c <SystemClock_Config>
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 800039c:	f000 fad0 	bl	8000940 <MX_GPIO_Init>
 MX_ADC1_Init();
 80003a0:	f000 fa90 	bl	80008c4 <MX_ADC1_Init>
 /* USER CODE BEGIN 2 */
 // greeting awal
 RED(0);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	48bd      	ldr	r0, [pc, #756]	; (80006a0 <main+0x310>)
 80003aa:	f002 f90a 	bl	80025c2 <HAL_GPIO_WritePin>
 GREEN(0);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2108      	movs	r1, #8
 80003b2:	48bb      	ldr	r0, [pc, #748]	; (80006a0 <main+0x310>)
 80003b4:	f002 f905 	bl	80025c2 <HAL_GPIO_WritePin>
 senddt(1, -1);
 80003b8:	21ff      	movs	r1, #255	; 0xff
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 fc54 	bl	8000c68 <senddt>
 senddt(2, -1);
 80003c0:	21ff      	movs	r1, #255	; 0xff
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fc50 	bl	8000c68 <senddt>
 LCD_Init();
 80003c8:	f7ff ff56 	bl	8000278 <LCD_Init>
 LCD_SetBacklight(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f7ff ffa7 	bl	8000320 <LCD_SetBacklight>
 LCD_SetCursor(0, 0);
 80003d2:	2100      	movs	r1, #0
 80003d4:	2000      	movs	r0, #0
 80003d6:	f7ff ff6f 	bl	80002b8 <LCD_SetCursor>
 LCD_Print("------TEMPLATE------");
 80003da:	48b2      	ldr	r0, [pc, #712]	; (80006a4 <main+0x314>)
 80003dc:	f7ff ffb2 	bl	8000344 <LCD_Print>
 LCD_SetCursor(0, 1);
 80003e0:	2101      	movs	r1, #1
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ff68 	bl	80002b8 <LCD_SetCursor>
 LCD_Print(" LKS PROVINSI 2023  ");
 80003e8:	48af      	ldr	r0, [pc, #700]	; (80006a8 <main+0x318>)
 80003ea:	f7ff ffab 	bl	8000344 <LCD_Print>
 HAL_Delay(3000);
 80003ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003f2:	f001 f9eb 	bl	80017cc <HAL_Delay>
 /* USER CODE END 2 */
 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (1){
  allbtnfunc();
 80003f6:	f000 fd99 	bl	8000f2c <allbtnfunc>
  switch (mainmenu){
 80003fa:	4bac      	ldr	r3, [pc, #688]	; (80006ac <main+0x31c>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3b01      	subs	r3, #1
 8000400:	2b03      	cmp	r3, #3
 8000402:	d8f8      	bhi.n	80003f6 <main+0x66>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <main+0x7c>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	0800041d 	.word	0x0800041d
 8000410:	080004c1 	.word	0x080004c1
 8000414:	08000553 	.word	0x08000553
 8000418:	08000719 	.word	0x08000719
   case 1:
    senddt(1, -1);
 800041c:	21ff      	movs	r1, #255	; 0xff
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fc22 	bl	8000c68 <senddt>
    senddt(2, -1);
 8000424:	21ff      	movs	r1, #255	; 0xff
 8000426:	2002      	movs	r0, #2
 8000428:	f000 fc1e 	bl	8000c68 <senddt>
    RED(0);
 800042c:	2201      	movs	r2, #1
 800042e:	2110      	movs	r1, #16
 8000430:	489b      	ldr	r0, [pc, #620]	; (80006a0 <main+0x310>)
 8000432:	f002 f8c6 	bl	80025c2 <HAL_GPIO_WritePin>
    GREEN(0);
 8000436:	2201      	movs	r2, #1
 8000438:	2108      	movs	r1, #8
 800043a:	4899      	ldr	r0, [pc, #612]	; (80006a0 <main+0x310>)
 800043c:	f002 f8c1 	bl	80025c2 <HAL_GPIO_WritePin>
    switch (menu){
 8000440:	4b9b      	ldr	r3, [pc, #620]	; (80006b0 <main+0x320>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d029      	beq.n	800049c <main+0x10c>
 8000448:	2b03      	cmp	r3, #3
 800044a:	f300 81c5 	bgt.w	80007d8 <main+0x448>
 800044e:	2b01      	cmp	r3, #1
 8000450:	d002      	beq.n	8000458 <main+0xc8>
 8000452:	2b02      	cmp	r3, #2
 8000454:	d011      	beq.n	800047a <main+0xea>
      LCD_Print("[SETTINGS          ]");
      LCD_SetCursor(0, 3);
      LCD_Print("                 3/3");
      break;
    }
    break;
 8000456:	e1bf      	b.n	80007d8 <main+0x448>
      bkm1();
 8000458:	f000 fbf0 	bl	8000c3c <bkm1>
      LCD_SetCursor(0, 2);
 800045c:	2102      	movs	r1, #2
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ff2a 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("[MANUAL            ]");
 8000464:	4893      	ldr	r0, [pc, #588]	; (80006b4 <main+0x324>)
 8000466:	f7ff ff6d 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 800046a:	2103      	movs	r1, #3
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff ff23 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("                 1/3");
 8000472:	4891      	ldr	r0, [pc, #580]	; (80006b8 <main+0x328>)
 8000474:	f7ff ff66 	bl	8000344 <LCD_Print>
      break;
 8000478:	e021      	b.n	80004be <main+0x12e>
      bkm1();
 800047a:	f000 fbdf 	bl	8000c3c <bkm1>
      LCD_SetCursor(0, 2);
 800047e:	2102      	movs	r1, #2
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff19 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("[REPORT            ]");
 8000486:	488d      	ldr	r0, [pc, #564]	; (80006bc <main+0x32c>)
 8000488:	f7ff ff5c 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 800048c:	2103      	movs	r1, #3
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff12 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("                 2/3");
 8000494:	488a      	ldr	r0, [pc, #552]	; (80006c0 <main+0x330>)
 8000496:	f7ff ff55 	bl	8000344 <LCD_Print>
      break;
 800049a:	e010      	b.n	80004be <main+0x12e>
      bkm1();
 800049c:	f000 fbce 	bl	8000c3c <bkm1>
      LCD_SetCursor(0, 2);
 80004a0:	2102      	movs	r1, #2
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff ff08 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("[SETTINGS          ]");
 80004a8:	4886      	ldr	r0, [pc, #536]	; (80006c4 <main+0x334>)
 80004aa:	f7ff ff4b 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 80004ae:	2103      	movs	r1, #3
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff01 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("                 3/3");
 80004b6:	4884      	ldr	r0, [pc, #528]	; (80006c8 <main+0x338>)
 80004b8:	f7ff ff44 	bl	8000344 <LCD_Print>
      break;
 80004bc:	bf00      	nop
    break;
 80004be:	e18b      	b.n	80007d8 <main+0x448>
   case 2:
    ledtrstr();
 80004c0:	f000 fc30 	bl	8000d24 <ledtrstr>
    LCD_SetCursor(0, 3);
 80004c4:	2103      	movs	r1, #3
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff fef6 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "%3lu", traincolor[0]);
 80004cc:	4b7f      	ldr	r3, [pc, #508]	; (80006cc <main+0x33c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	497f      	ldr	r1, [pc, #508]	; (80006d0 <main+0x340>)
 80004d4:	487f      	ldr	r0, [pc, #508]	; (80006d4 <main+0x344>)
 80004d6:	f002 fdf5 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 80004da:	487e      	ldr	r0, [pc, #504]	; (80006d4 <main+0x344>)
 80004dc:	f7ff ff32 	bl	8000344 <LCD_Print>
    LCD_SetCursor(4, 3);
 80004e0:	2103      	movs	r1, #3
 80004e2:	2004      	movs	r0, #4
 80004e4:	f7ff fee8 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "%3lu", traincolor[1]);
 80004e8:	4b78      	ldr	r3, [pc, #480]	; (80006cc <main+0x33c>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4978      	ldr	r1, [pc, #480]	; (80006d0 <main+0x340>)
 80004f0:	4878      	ldr	r0, [pc, #480]	; (80006d4 <main+0x344>)
 80004f2:	f002 fde7 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 80004f6:	4877      	ldr	r0, [pc, #476]	; (80006d4 <main+0x344>)
 80004f8:	f7ff ff24 	bl	8000344 <LCD_Print>
    LCD_SetCursor(8, 3);
 80004fc:	2103      	movs	r1, #3
 80004fe:	2008      	movs	r0, #8
 8000500:	f7ff feda 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "%3lu", traincolor[2]);
 8000504:	4b71      	ldr	r3, [pc, #452]	; (80006cc <main+0x33c>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	461a      	mov	r2, r3
 800050a:	4971      	ldr	r1, [pc, #452]	; (80006d0 <main+0x340>)
 800050c:	4871      	ldr	r0, [pc, #452]	; (80006d4 <main+0x344>)
 800050e:	f002 fdd9 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 8000512:	4870      	ldr	r0, [pc, #448]	; (80006d4 <main+0x344>)
 8000514:	f7ff ff16 	bl	8000344 <LCD_Print>
    LCD_SetCursor(12, 3);
 8000518:	2103      	movs	r1, #3
 800051a:	200c      	movs	r0, #12
 800051c:	f7ff fecc 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "%3lu", traincolor[3]);
 8000520:	4b6a      	ldr	r3, [pc, #424]	; (80006cc <main+0x33c>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	461a      	mov	r2, r3
 8000526:	496a      	ldr	r1, [pc, #424]	; (80006d0 <main+0x340>)
 8000528:	486a      	ldr	r0, [pc, #424]	; (80006d4 <main+0x344>)
 800052a:	f002 fdcb 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 800052e:	4869      	ldr	r0, [pc, #420]	; (80006d4 <main+0x344>)
 8000530:	f7ff ff08 	bl	8000344 <LCD_Print>
    LCD_SetCursor(16, 3);
 8000534:	2103      	movs	r1, #3
 8000536:	2010      	movs	r0, #16
 8000538:	f7ff febe 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "%4lu", traincolor[4]);
 800053c:	4b63      	ldr	r3, [pc, #396]	; (80006cc <main+0x33c>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	461a      	mov	r2, r3
 8000542:	4965      	ldr	r1, [pc, #404]	; (80006d8 <main+0x348>)
 8000544:	4863      	ldr	r0, [pc, #396]	; (80006d4 <main+0x344>)
 8000546:	f002 fdbd 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 800054a:	4862      	ldr	r0, [pc, #392]	; (80006d4 <main+0x344>)
 800054c:	f7ff fefa 	bl	8000344 <LCD_Print>
    break;
 8000550:	e144      	b.n	80007dc <main+0x44c>
   case 3:
    sw5ck();
 8000552:	f000 fa63 	bl	8000a1c <sw5ck>
    LCD_SetCursor(0, 0);
 8000556:	2100      	movs	r1, #0
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff fead 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("   STATION REPORT   ");
 800055e:	485f      	ldr	r0, [pc, #380]	; (80006dc <main+0x34c>)
 8000560:	f7ff fef0 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 1);
 8000564:	2101      	movs	r1, #1
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fea6 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "UPTIME:%3lumin%3lusec", (uwTick / 60000) % 60,
 800056c:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <main+0x350>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a5c      	ldr	r2, [pc, #368]	; (80006e4 <main+0x354>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	0b99      	lsrs	r1, r3, #14
 8000578:	4b5b      	ldr	r3, [pc, #364]	; (80006e8 <main+0x358>)
 800057a:	fba3 2301 	umull	r2, r3, r3, r1
 800057e:	095a      	lsrs	r2, r3, #5
 8000580:	4613      	mov	r3, r2
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	1aca      	subs	r2, r1, r3
      uwTick / 1000 % 60);
 800058a:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <main+0x350>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4957      	ldr	r1, [pc, #348]	; (80006ec <main+0x35c>)
 8000590:	fba1 1303 	umull	r1, r3, r1, r3
 8000594:	0998      	lsrs	r0, r3, #6
    sprintf(lcd_buffer, "UPTIME:%3lumin%3lusec", (uwTick / 60000) % 60,
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <main+0x358>)
 8000598:	fba3 1300 	umull	r1, r3, r3, r0
 800059c:	0959      	lsrs	r1, r3, #5
 800059e:	460b      	mov	r3, r1
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	1a5b      	subs	r3, r3, r1
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	1ac1      	subs	r1, r0, r3
 80005a8:	460b      	mov	r3, r1
 80005aa:	4951      	ldr	r1, [pc, #324]	; (80006f0 <main+0x360>)
 80005ac:	4849      	ldr	r0, [pc, #292]	; (80006d4 <main+0x344>)
 80005ae:	f002 fd89 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 80005b2:	4848      	ldr	r0, [pc, #288]	; (80006d4 <main+0x344>)
 80005b4:	f7ff fec6 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 2);
 80005b8:	2102      	movs	r1, #2
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fe7c 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "RED:%-3lu", traincolor[0]);
 80005c0:	4b42      	ldr	r3, [pc, #264]	; (80006cc <main+0x33c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	494b      	ldr	r1, [pc, #300]	; (80006f4 <main+0x364>)
 80005c8:	4842      	ldr	r0, [pc, #264]	; (80006d4 <main+0x344>)
 80005ca:	f002 fd7b 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 80005ce:	4841      	ldr	r0, [pc, #260]	; (80006d4 <main+0x344>)
 80005d0:	f7ff feb8 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 3);
 80005d4:	2103      	movs	r1, #3
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fe6e 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "GRN:%-3lu", traincolor[1]);
 80005dc:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <main+0x33c>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4945      	ldr	r1, [pc, #276]	; (80006f8 <main+0x368>)
 80005e4:	483b      	ldr	r0, [pc, #236]	; (80006d4 <main+0x344>)
 80005e6:	f002 fd6d 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 80005ea:	483a      	ldr	r0, [pc, #232]	; (80006d4 <main+0x344>)
 80005ec:	f7ff feaa 	bl	8000344 <LCD_Print>
    LCD_SetCursor(7, 2);
 80005f0:	2102      	movs	r1, #2
 80005f2:	2007      	movs	r0, #7
 80005f4:	f7ff fe60 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "BLU:%-3lu", traincolor[2]);
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x33c>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	461a      	mov	r2, r3
 80005fe:	493f      	ldr	r1, [pc, #252]	; (80006fc <main+0x36c>)
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <main+0x344>)
 8000602:	f002 fd5f 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 8000606:	4833      	ldr	r0, [pc, #204]	; (80006d4 <main+0x344>)
 8000608:	f7ff fe9c 	bl	8000344 <LCD_Print>
    LCD_SetCursor(7, 3);
 800060c:	2103      	movs	r1, #3
 800060e:	2007      	movs	r0, #7
 8000610:	f7ff fe52 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "WHT:%-3lu", traincolor[3]);
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <main+0x33c>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	461a      	mov	r2, r3
 800061a:	4939      	ldr	r1, [pc, #228]	; (8000700 <main+0x370>)
 800061c:	482d      	ldr	r0, [pc, #180]	; (80006d4 <main+0x344>)
 800061e:	f002 fd51 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 8000622:	482c      	ldr	r0, [pc, #176]	; (80006d4 <main+0x344>)
 8000624:	f7ff fe8e 	bl	8000344 <LCD_Print>
    LCD_SetCursor(14, 2);
 8000628:	2102      	movs	r1, #2
 800062a:	200e      	movs	r0, #14
 800062c:	f7ff fe44 	bl	80002b8 <LCD_SetCursor>
    sprintf(lcd_buffer, "DFC:%-2lu", traincolor[4]);
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0x33c>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	461a      	mov	r2, r3
 8000636:	4933      	ldr	r1, [pc, #204]	; (8000704 <main+0x374>)
 8000638:	4826      	ldr	r0, [pc, #152]	; (80006d4 <main+0x344>)
 800063a:	f002 fd43 	bl	80030c4 <siprintf>
    LCD_Print(lcd_buffer);
 800063e:	4825      	ldr	r0, [pc, #148]	; (80006d4 <main+0x344>)
 8000640:	f7ff fe80 	bl	8000344 <LCD_Print>
    if (uwTick - eraset >= 500){
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <main+0x350>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <main+0x378>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000652:	d311      	bcc.n	8000678 <main+0x2e8>
     eraset = uwTick;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <main+0x350>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2b      	ldr	r2, [pc, #172]	; (8000708 <main+0x378>)
 800065a:	6013      	str	r3, [r2, #0]
     if (erasecon == 0){
 800065c:	4b2b      	ldr	r3, [pc, #172]	; (800070c <main+0x37c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <main+0x2e2>
      erasecon = 1;
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <main+0x37c>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e002      	b.n	8000678 <main+0x2e8>
     }else{
      erasecon = 0;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <main+0x37c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
     }
    }
    if (erasecon == 1){
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <main+0x37c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <main+0x300>
     LCD_SetCursor(14, 3);
 8000680:	2103      	movs	r1, #3
 8000682:	200e      	movs	r0, #14
 8000684:	f7ff fe18 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("ERASE?");
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <main+0x380>)
 800068a:	f7ff fe5b 	bl	8000344 <LCD_Print>
    }else{
     LCD_SetCursor(14, 3);
     LCD_Print("      ");
    }
    break;
 800068e:	e0a5      	b.n	80007dc <main+0x44c>
     LCD_SetCursor(14, 3);
 8000690:	2103      	movs	r1, #3
 8000692:	200e      	movs	r0, #14
 8000694:	f7ff fe10 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("      ");
 8000698:	481e      	ldr	r0, [pc, #120]	; (8000714 <main+0x384>)
 800069a:	f7ff fe53 	bl	8000344 <LCD_Print>
    break;
 800069e:	e09d      	b.n	80007dc <main+0x44c>
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	08003a40 	.word	0x08003a40
 80006a8:	08003a58 	.word	0x08003a58
 80006ac:	20000001 	.word	0x20000001
 80006b0:	20000000 	.word	0x20000000
 80006b4:	08003a70 	.word	0x08003a70
 80006b8:	08003a88 	.word	0x08003a88
 80006bc:	08003aa0 	.word	0x08003aa0
 80006c0:	08003ab8 	.word	0x08003ab8
 80006c4:	08003ad0 	.word	0x08003ad0
 80006c8:	08003ae8 	.word	0x08003ae8
 80006cc:	200000d8 	.word	0x200000d8
 80006d0:	08003b00 	.word	0x08003b00
 80006d4:	200000ec 	.word	0x200000ec
 80006d8:	08003b08 	.word	0x08003b08
 80006dc:	08003b10 	.word	0x08003b10
 80006e0:	20000114 	.word	0x20000114
 80006e4:	45e7b273 	.word	0x45e7b273
 80006e8:	88888889 	.word	0x88888889
 80006ec:	10624dd3 	.word	0x10624dd3
 80006f0:	08003b28 	.word	0x08003b28
 80006f4:	08003b40 	.word	0x08003b40
 80006f8:	08003b4c 	.word	0x08003b4c
 80006fc:	08003b58 	.word	0x08003b58
 8000700:	08003b64 	.word	0x08003b64
 8000704:	08003b70 	.word	0x08003b70
 8000708:	200000d0 	.word	0x200000d0
 800070c:	200000b9 	.word	0x200000b9
 8000710:	08003b7c 	.word	0x08003b7c
 8000714:	08003b84 	.word	0x08003b84
   case 4:
    LCD_SetCursor(0, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fdcc 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("  STATION SETTINGS  ");
 8000720:	482f      	ldr	r0, [pc, #188]	; (80007e0 <main+0x450>)
 8000722:	f7ff fe0f 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 1);
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff fdc5 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("====================");
 800072e:	482d      	ldr	r0, [pc, #180]	; (80007e4 <main+0x454>)
 8000730:	f7ff fe08 	bl	8000344 <LCD_Print>
    if (HAL_GPIO_ReadPin(LCD_BL_GPIO_Port, LCD_BL_Pin) == 1){
 8000734:	2120      	movs	r1, #32
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <main+0x458>)
 8000738:	f001 ff2c 	bl	8002594 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d107      	bne.n	8000752 <main+0x3c2>
     LCD_SetCursor(3, 2);
 8000742:	2102      	movs	r1, #2
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff fdb7 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("BACKLIGHT: ON    ");
 800074a:	4828      	ldr	r0, [pc, #160]	; (80007ec <main+0x45c>)
 800074c:	f7ff fdfa 	bl	8000344 <LCD_Print>
 8000750:	e006      	b.n	8000760 <main+0x3d0>
    }else{
     LCD_SetCursor(3, 2);
 8000752:	2102      	movs	r1, #2
 8000754:	2003      	movs	r0, #3
 8000756:	f7ff fdaf 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("BACKLIGHT: OFF   ");
 800075a:	4825      	ldr	r0, [pc, #148]	; (80007f0 <main+0x460>)
 800075c:	f7ff fdf2 	bl	8000344 <LCD_Print>
    }
    if (mute == 0){
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <main+0x464>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	f083 0301 	eor.w	r3, r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d007      	beq.n	800077e <main+0x3ee>
     LCD_SetCursor(3, 3);
 800076e:	2103      	movs	r1, #3
 8000770:	2003      	movs	r0, #3
 8000772:	f7ff fda1 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("MUTE MODE: ON    ");
 8000776:	4820      	ldr	r0, [pc, #128]	; (80007f8 <main+0x468>)
 8000778:	f7ff fde4 	bl	8000344 <LCD_Print>
 800077c:	e006      	b.n	800078c <main+0x3fc>
    }else{
     LCD_SetCursor(3, 3);
 800077e:	2103      	movs	r1, #3
 8000780:	2003      	movs	r0, #3
 8000782:	f7ff fd99 	bl	80002b8 <LCD_SetCursor>
     LCD_Print("MUTE MODE: OFF   ");
 8000786:	481d      	ldr	r0, [pc, #116]	; (80007fc <main+0x46c>)
 8000788:	f7ff fddc 	bl	8000344 <LCD_Print>
    }
    // cursor
    switch (settings){
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <main+0x470>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d002      	beq.n	800079a <main+0x40a>
 8000794:	2b02      	cmp	r3, #2
 8000796:	d00f      	beq.n	80007b8 <main+0x428>
      LCD_Print("   ");
      LCD_SetCursor(0, 3);
      LCD_Print("=> ");
      break;
    }
    break;
 8000798:	e020      	b.n	80007dc <main+0x44c>
      LCD_SetCursor(0, 2);
 800079a:	2102      	movs	r1, #2
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff fd8b 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("=> ");
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <main+0x474>)
 80007a4:	f7ff fdce 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 80007a8:	2103      	movs	r1, #3
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fd84 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("   ");
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <main+0x478>)
 80007b2:	f7ff fdc7 	bl	8000344 <LCD_Print>
      break;
 80007b6:	e00e      	b.n	80007d6 <main+0x446>
      LCD_SetCursor(0, 2);
 80007b8:	2102      	movs	r1, #2
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff fd7c 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("   ");
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <main+0x478>)
 80007c2:	f7ff fdbf 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 80007c6:	2103      	movs	r1, #3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fd75 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("=> ");
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <main+0x474>)
 80007d0:	f7ff fdb8 	bl	8000344 <LCD_Print>
      break;
 80007d4:	bf00      	nop
    break;
 80007d6:	e001      	b.n	80007dc <main+0x44c>
    break;
 80007d8:	bf00      	nop
 80007da:	e60c      	b.n	80003f6 <main+0x66>
  allbtnfunc();
 80007dc:	e60b      	b.n	80003f6 <main+0x66>
 80007de:	bf00      	nop
 80007e0:	08003b8c 	.word	0x08003b8c
 80007e4:	08003ba4 	.word	0x08003ba4
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	08003bbc 	.word	0x08003bbc
 80007f0:	08003bd0 	.word	0x08003bd0
 80007f4:	200000b0 	.word	0x200000b0
 80007f8:	08003be4 	.word	0x08003be4
 80007fc:	08003bf8 	.word	0x08003bf8
 8000800:	20000002 	.word	0x20000002
 8000804:	08003c0c 	.word	0x08003c0c
 8000808:	08003c10 	.word	0x08003c10

0800080c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	2228      	movs	r2, #40	; 0x28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fc72 	bl	8003104 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

 /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
 RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000858:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fec6 	bl	80025f4 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x66>
  Error_Handler();
 800086e:	f000 fe49 	bl	8001504 <Error_Handler>
 }

 /** Initializes the CPU, AHB and APB buses clocks
  */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	617b      	str	r3, [r7, #20]
   | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	623b      	str	r3, [r7, #32]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24

 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK){
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f932 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x92>
  Error_Handler();
 800089a:	f000 fe33 	bl	8001504 <Error_Handler>
 }
 PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800089e:	2302      	movs	r3, #2
 80008a0:	607b      	str	r3, [r7, #4]
 PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a6:	60fb      	str	r3, [r7, #12]
 if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fa9e 	bl	8002dec <HAL_RCCEx_PeriphCLKConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xae>
  Error_Handler();
 80008b6:	f000 fe25 	bl	8001504 <Error_Handler>
 }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	; 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init (void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN ADC1_Init 0 */

 /* USER CODE END ADC1_Init 0 */

 ADC_ChannelConfTypeDef sConfig = { 0 };
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]

 /* USER CODE END ADC1_Init 1 */

 /** Common config
  */
 hadc1.Instance = ADC1;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_ADC1_Init+0x74>)
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <MX_ADC1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
 hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ADC1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
 hadc1.Init.ContinuousConvMode = ENABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ADC1_Init+0x74>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	731a      	strb	r2, [r3, #12]
 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ADC1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	751a      	strb	r2, [r3, #20]
 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ADC1_Init+0x74>)
 80008ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008f2:	61da      	str	r2, [r3, #28]
 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_ADC1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
 hadc1.Init.NbrOfConversion = 1;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ADC1_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	611a      	str	r2, [r3, #16]
 if (HAL_ADC_Init(&hadc1) != HAL_OK){
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC1_Init+0x74>)
 8000902:	f000 ff87 	bl	8001814 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x4c>
  Error_Handler();
 800090c:	f000 fdfa 	bl	8001504 <Error_Handler>
 }

 /** Configure Regular Channel
  */
 sConfig.Channel = ADC_CHANNEL_0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 sConfig.Rank = ADC_REGULAR_RANK_1;
 8000914:	2301      	movs	r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_ADC1_Init+0x74>)
 8000922:	f001 fa3b 	bl	8001d9c <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x6c>
  Error_Handler();
 800092c:	f000 fdea 	bl	8001504 <Error_Handler>
 }
 /* USER CODE BEGIN ADC1_Init 2 */

 /* USER CODE END ADC1_Init 2 */
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000080 	.word	0x20000080
 800093c:	40012400 	.word	0x40012400

08000940 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void){
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0xd0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_GPIO_Init+0xd0>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0xd0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0320 	and.w	r3, r3, #32
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0xd0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_GPIO_Init+0xd0>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_GPIO_Init+0xd0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_GPIO_Init+0xd0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <MX_GPIO_Init+0xd0>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_GPIO_Init+0xd0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOA,
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009a4:	f001 fe0d 	bl	80025c2 <HAL_GPIO_WritePin>
 LCD_D4_Pin | LCD_D5_Pin | LATCH_Pin | DATA_Pin | CLOCK_Pin, GPIO_PIN_RESET);

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB,
 80009a8:	2200      	movs	r2, #0
 80009aa:	f240 31fb 	movw	r1, #1019	; 0x3fb
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <MX_GPIO_Init+0xd8>)
 80009b0:	f001 fe07 	bl	80025c2 <HAL_GPIO_WritePin>
   LCD_D6_Pin | BUZZER_Pin | LED_GREEN_Pin | LED_RED_Pin | LCD_BL_Pin
     | LCD_EN_Pin | LCD_RW_Pin | LCD_RS_Pin | LCD_D7_Pin, GPIO_PIN_RESET);

 /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
  SW5_Pin */
 GPIO_InitStruct.Pin = SW1_Pin | SW2_Pin | SW3_Pin | SW4_Pin | SW5_Pin;
 80009b4:	233e      	movs	r3, #62	; 0x3e
 80009b6:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009c8:	f001 fc60 	bl	800228c <HAL_GPIO_Init>

 /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LATCH_Pin DATA_Pin
  CLOCK_Pin */
 GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LATCH_Pin | DATA_Pin
 80009cc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80009d0:	613b      	str	r3, [r7, #16]
   | CLOCK_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2302      	movs	r3, #2
 80009dc:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009e6:	f001 fc51 	bl	800228c <HAL_GPIO_Init>

 /*Configure GPIO pins : LCD_D6_Pin BUZZER_Pin LED_GREEN_Pin LED_RED_Pin
  LCD_BL_Pin LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin
  LCD_D7_Pin */
 GPIO_InitStruct.Pin = LCD_D6_Pin | BUZZER_Pin | LED_GREEN_Pin | LED_RED_Pin
 80009ea:	f240 33fb 	movw	r3, #1019	; 0x3fb
 80009ee:	613b      	str	r3, [r7, #16]
   | LCD_BL_Pin | LCD_EN_Pin | LCD_RW_Pin | LCD_RS_Pin | LCD_D7_Pin;
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0xd8>)
 8000a04:	f001 fc42 	bl	800228c <HAL_GPIO_Init>

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <sw5ck>:

/* USER CODE BEGIN 4 */

// fungsi pengecek kondisi sw5 di dalam reset menu pengaturan
void sw5ck (){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 switch (sw5stsnow){
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <sw5ck+0xbc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d02d      	beq.n	8000a86 <sw5ck+0x6a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	dc4b      	bgt.n	8000ac6 <sw5ck+0xaa>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <sw5ck+0x1c>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d00b      	beq.n	8000a4e <sw5ck+0x32>
   }
   sw5stsnow = 0;
   sw5timer = 0;
   break;
  default:
   break;
 8000a36:	e046      	b.n	8000ac6 <sw5ck+0xaa>
   if (SW(5) == GPIO_PIN_RESET){
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4828      	ldr	r0, [pc, #160]	; (8000adc <sw5ck+0xc0>)
 8000a3c:	f001 fdaa 	bl	8002594 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d141      	bne.n	8000aca <sw5ck+0xae>
    sw5stsnow = 1;
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <sw5ck+0xbc>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
   break;
 8000a4c:	e03d      	b.n	8000aca <sw5ck+0xae>
   if (uwTick - timersec >= 1000){
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <sw5ck+0xc4>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <sw5ck+0xc8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a5c:	d308      	bcc.n	8000a70 <sw5ck+0x54>
    timersec = uwTick;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <sw5ck+0xc4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <sw5ck+0xc8>)
 8000a64:	6013      	str	r3, [r2, #0]
    sw5timer++;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <sw5ck+0xcc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <sw5ck+0xcc>)
 8000a6e:	6013      	str	r3, [r2, #0]
   if (SW(5) == GPIO_PIN_SET){
 8000a70:	2120      	movs	r1, #32
 8000a72:	481a      	ldr	r0, [pc, #104]	; (8000adc <sw5ck+0xc0>)
 8000a74:	f001 fd8e 	bl	8002594 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d127      	bne.n	8000ace <sw5ck+0xb2>
    sw5stsnow = 2;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <sw5ck+0xbc>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	701a      	strb	r2, [r3, #0]
   break;
 8000a84:	e023      	b.n	8000ace <sw5ck+0xb2>
   if (sw5timer >= 3){
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <sw5ck+0xcc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d911      	bls.n	8000ab2 <sw5ck+0x96>
    uwTick = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <sw5ck+0xc4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 5; i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	e007      	b.n	8000aaa <sw5ck+0x8e>
     traincolor[i] = 0;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <sw5ck+0xd0>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 5; i++){
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d9f4      	bls.n	8000a9a <sw5ck+0x7e>
 8000ab0:	e002      	b.n	8000ab8 <sw5ck+0x9c>
    mainmenu = 1;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <sw5ck+0xd4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
   sw5stsnow = 0;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <sw5ck+0xbc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
   sw5timer = 0;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <sw5ck+0xcc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
   break;
 8000ac4:	e004      	b.n	8000ad0 <sw5ck+0xb4>
   break;
 8000ac6:	bf00      	nop
 8000ac8:	e002      	b.n	8000ad0 <sw5ck+0xb4>
   break;
 8000aca:	bf00      	nop
 8000acc:	e000      	b.n	8000ad0 <sw5ck+0xb4>
   break;
 8000ace:	bf00      	nop
 }
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000007c 	.word	0x2000007c
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	20000114 	.word	0x20000114
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	20000001 	.word	0x20000001

08000af4 <trsrt>:

/*func penyingkat jalan kereta (stopplc = destinasi akhir, red & grn =
 menghidupkan/mematikan led, which tr= warnakereta yang digunakan)*/
void trsrt (u8 stopplc, _Bool REDb, _Bool GRNb, uint8_t whichtr){
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4604      	mov	r4, r0
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4623      	mov	r3, r4
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	4603      	mov	r3, r0
 8000b08:	71bb      	strb	r3, [r7, #6]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	717b      	strb	r3, [r7, #5]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	713b      	strb	r3, [r7, #4]
 if (traingo <= stopplc){
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <trsrt+0x130>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d334      	bcc.n	8000b86 <trsrt+0x92>
  senddt(1, traingo);
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <trsrt+0x130>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 f8a0 	bl	8000c68 <senddt>
  traingo++;
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <trsrt+0x130>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <trsrt+0x130>)
 8000b32:	701a      	strb	r2, [r3, #0]
  BUZZER(mute);
 8000b34:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <trsrt+0x134>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <trsrt+0x56>
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <trsrt+0x134>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	2102      	movs	r1, #2
 8000b44:	4839      	ldr	r0, [pc, #228]	; (8000c2c <trsrt+0x138>)
 8000b46:	f001 fd3c 	bl	80025c2 <HAL_GPIO_WritePin>
  uint16_t temp = 100 + adcvreader();
 8000b4a:	f000 fcbf 	bl	80014cc <adcvreader>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	3364      	adds	r3, #100	; 0x64
 8000b52:	81fb      	strh	r3, [r7, #14]
  for (int i = 0; i < temp; i++){
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e007      	b.n	8000b6a <trsrt+0x76>
   allbtnfunc();
 8000b5a:	f000 f9e7 	bl	8000f2c <allbtnfunc>
   HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fe34 	bl	80017cc <HAL_Delay>
  for (int i = 0; i < temp; i++){
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf3      	blt.n	8000b5a <trsrt+0x66>
  }
  BUZZER(0);
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <trsrt+0x134>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d04f      	beq.n	8000c1a <trsrt+0x126>
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	482b      	ldr	r0, [pc, #172]	; (8000c2c <trsrt+0x138>)
 8000b80:	f001 fd1f 	bl	80025c2 <HAL_GPIO_WritePin>
  }
  senddt(2, -1);
  RED(0);
  GREEN(0);
 }
}
 8000b84:	e049      	b.n	8000c1a <trsrt+0x126>
  traingo = 0;
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <trsrt+0x130>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
  trainconnow = 0;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <trsrt+0x13c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
  RED(REDb);
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	f083 0301 	eor.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <trsrt+0x138>)
 8000ba0:	f001 fd0f 	bl	80025c2 <HAL_GPIO_WritePin>
  GREEN(GRNb);
 8000ba4:	797b      	ldrb	r3, [r7, #5]
 8000ba6:	f083 0301 	eor.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	2108      	movs	r1, #8
 8000bb0:	481e      	ldr	r0, [pc, #120]	; (8000c2c <trsrt+0x138>)
 8000bb2:	f001 fd06 	bl	80025c2 <HAL_GPIO_WritePin>
  traincolortype = 0;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <trsrt+0x140>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
  senddt(1, -1);
 8000bbc:	21ff      	movs	r1, #255	; 0xff
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 f852 	bl	8000c68 <senddt>
  senddt(2, stopplc);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f000 f84d 	bl	8000c68 <senddt>
  traincolor[whichtr]++;
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <trsrt+0x144>)
 8000bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd6:	3201      	adds	r2, #1
 8000bd8:	4917      	ldr	r1, [pc, #92]	; (8000c38 <trsrt+0x144>)
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 3000; i++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e007      	b.n	8000bf4 <trsrt+0x100>
   allbtnfunc();
 8000be4:	f000 f9a2 	bl	8000f2c <allbtnfunc>
   HAL_Delay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f000 fdef 	bl	80017cc <HAL_Delay>
  for (int i = 0; i < 3000; i++){
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	ddf2      	ble.n	8000be4 <trsrt+0xf0>
  senddt(2, -1);
 8000bfe:	21ff      	movs	r1, #255	; 0xff
 8000c00:	2002      	movs	r0, #2
 8000c02:	f000 f831 	bl	8000c68 <senddt>
  RED(0);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <trsrt+0x138>)
 8000c0c:	f001 fcd9 	bl	80025c2 <HAL_GPIO_WritePin>
  GREEN(0);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2108      	movs	r1, #8
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <trsrt+0x138>)
 8000c16:	f001 fcd4 	bl	80025c2 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000c2 	.word	0x200000c2
 8000c28:	200000b0 	.word	0x200000b0
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	2000007d 	.word	0x2000007d
 8000c34:	200000c1 	.word	0x200000c1
 8000c38:	200000d8 	.word	0x200000d8

08000c3c <bkm1>:

void bkm1 (){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
 LCD_SetCursor(0, 0);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fb38 	bl	80002b8 <LCD_SetCursor>
 LCD_Print("  SORTING  STATION  ");
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <bkm1+0x24>)
 8000c4a:	f7ff fb7b 	bl	8000344 <LCD_Print>
 LCD_SetCursor(0, 1);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fb31 	bl	80002b8 <LCD_SetCursor>
 LCD_Print("  SELECT OPERATION  ");
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <bkm1+0x28>)
 8000c58:	f7ff fb74 	bl	8000344 <LCD_Print>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08003c14 	.word	0x08003c14
 8000c64:	08003c2c 	.word	0x08003c2c

08000c68 <senddt>:

void senddt (uint8_t line, uint8_t posisi){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]

 if (line == 1){
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d108      	bne.n	8000c90 <senddt+0x28>
  dttrain16[1] = 1 << (15 - posisi);
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	f1c3 030f 	rsb	r3, r3, #15
 8000c84:	2201      	movs	r2, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <senddt+0xb4>)
 8000c8e:	805a      	strh	r2, [r3, #2]
 }
 if (line == 2){
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d106      	bne.n	8000ca4 <senddt+0x3c>
  dttrain16[2] = 1 << (posisi);
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <senddt+0xb4>)
 8000ca2:	809a      	strh	r2, [r3, #4]
 }
 for (uint8_t i = 0; i < 32; i++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e024      	b.n	8000cf4 <senddt+0x8c>
  DATA(!(((dttrain16[1] << 16 | dttrain16[2]) >> i) & 1));
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <senddt+0xb4>)
 8000cac:	885b      	ldrh	r3, [r3, #2]
 8000cae:	041b      	lsls	r3, r3, #16
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <senddt+0xb4>)
 8000cb2:	8892      	ldrh	r2, [r2, #4]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	fa42 f303 	asr.w	r3, r2, r3
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <senddt+0xb8>)
 8000cd2:	f001 fc76 	bl	80025c2 <HAL_GPIO_WritePin>
  CLOCK(0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <senddt+0xb8>)
 8000cde:	f001 fc70 	bl	80025c2 <HAL_GPIO_WritePin>
  CLOCK(1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <senddt+0xb8>)
 8000cea:	f001 fc6a 	bl	80025c2 <HAL_GPIO_WritePin>
 for (uint8_t i = 0; i < 32; i++){
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2b1f      	cmp	r3, #31
 8000cf8:	d9d7      	bls.n	8000caa <senddt+0x42>
 }
 LATCH(1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <senddt+0xb8>)
 8000d02:	f001 fc5e 	bl	80025c2 <HAL_GPIO_WritePin>
 LATCH(0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <senddt+0xb8>)
 8000d0e:	f001 fc58 	bl	80025c2 <HAL_GPIO_WritePin>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	40010800 	.word	0x40010800

08000d24 <ledtrstr>:

void ledtrstr (){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 switch (trainconnow){
 8000d2a:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <ledtrstr+0x1ec>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	f000 80b1 	beq.w	8000e96 <ledtrstr+0x172>
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	f300 80e6 	bgt.w	8000f06 <ledtrstr+0x1e2>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <ledtrstr+0x20>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d03c      	beq.n	8000dbc <ledtrstr+0x98>
     trsrt(13, 0, 0, 3);
     break;
   }
   break;
 }
}
 8000d42:	e0e0      	b.n	8000f06 <ledtrstr+0x1e2>
   if (traingo <= 4){
 8000d44:	4b73      	ldr	r3, [pc, #460]	; (8000f14 <ledtrstr+0x1f0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d833      	bhi.n	8000db4 <ledtrstr+0x90>
    senddt(1, traingo);
 8000d4c:	4b71      	ldr	r3, [pc, #452]	; (8000f14 <ledtrstr+0x1f0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff ff88 	bl	8000c68 <senddt>
    traingo++;
 8000d58:	4b6e      	ldr	r3, [pc, #440]	; (8000f14 <ledtrstr+0x1f0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <ledtrstr+0x1f0>)
 8000d62:	701a      	strb	r2, [r3, #0]
    BUZZER(1);
 8000d64:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <ledtrstr+0x1f4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <ledtrstr+0x52>
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2102      	movs	r1, #2
 8000d70:	486a      	ldr	r0, [pc, #424]	; (8000f1c <ledtrstr+0x1f8>)
 8000d72:	f001 fc26 	bl	80025c2 <HAL_GPIO_WritePin>
    uint16_t temp = 100 + adcvreader();
 8000d76:	f000 fba9 	bl	80014cc <adcvreader>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	3364      	adds	r3, #100	; 0x64
 8000d7e:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < temp; i++){
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e007      	b.n	8000d96 <ledtrstr+0x72>
     allbtnfunc();
 8000d86:	f000 f8d1 	bl	8000f2c <allbtnfunc>
     HAL_Delay(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fd1e 	bl	80017cc <HAL_Delay>
    for (int i = 0; i < temp; i++){
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dbf3      	blt.n	8000d86 <ledtrstr+0x62>
    BUZZER(0);
 8000d9e:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <ledtrstr+0x1f4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80ac 	beq.w	8000f00 <ledtrstr+0x1dc>
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	485b      	ldr	r0, [pc, #364]	; (8000f1c <ledtrstr+0x1f8>)
 8000dae:	f001 fc08 	bl	80025c2 <HAL_GPIO_WritePin>
   break;
 8000db2:	e0a5      	b.n	8000f00 <ledtrstr+0x1dc>
    trainconnow = 1;
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <ledtrstr+0x1ec>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
   break;
 8000dba:	e0a1      	b.n	8000f00 <ledtrstr+0x1dc>
   for (int i = 0; i < 3000; i++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e00e      	b.n	8000de0 <ledtrstr+0xbc>
    brk = 0;
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <ledtrstr+0x1fc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    allbtnfunc();
 8000dc8:	f000 f8b0 	bl	8000f2c <allbtnfunc>
    if (brk){
 8000dcc:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <ledtrstr+0x1fc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <ledtrstr+0xc8>
    HAL_Delay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fcf9 	bl	80017cc <HAL_Delay>
   for (int i = 0; i < 3000; i++){
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000de6:	4293      	cmp	r3, r2
 8000de8:	ddeb      	ble.n	8000dc2 <ledtrstr+0x9e>
 8000dea:	e000      	b.n	8000dee <ledtrstr+0xca>
     break;
 8000dec:	bf00      	nop
   if (traincolortype == 0){
 8000dee:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <ledtrstr+0x200>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d14b      	bne.n	8000e8e <ledtrstr+0x16a>
    for (int i = 0; i < 3; i++){
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e045      	b.n	8000e88 <ledtrstr+0x164>
     BUZZER(mute);
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <ledtrstr+0x1f4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <ledtrstr+0xee>
 8000e04:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <ledtrstr+0x1f4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <ledtrstr+0x1f8>)
 8000e0e:	f001 fbd8 	bl	80025c2 <HAL_GPIO_WritePin>
     RED(1);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	4841      	ldr	r0, [pc, #260]	; (8000f1c <ledtrstr+0x1f8>)
 8000e18:	f001 fbd3 	bl	80025c2 <HAL_GPIO_WritePin>
     for (int i = 0; i < 400; i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	e009      	b.n	8000e36 <ledtrstr+0x112>
      HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 fcd2 	bl	80017cc <HAL_Delay>
      if (mainmenu != 2){
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <ledtrstr+0x204>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d107      	bne.n	8000e40 <ledtrstr+0x11c>
     for (int i = 0; i < 400; i++){
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e3c:	dbf1      	blt.n	8000e22 <ledtrstr+0xfe>
 8000e3e:	e000      	b.n	8000e42 <ledtrstr+0x11e>
       break;
 8000e40:	bf00      	nop
     BUZZER(0);
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <ledtrstr+0x1f4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <ledtrstr+0x130>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4833      	ldr	r0, [pc, #204]	; (8000f1c <ledtrstr+0x1f8>)
 8000e50:	f001 fbb7 	bl	80025c2 <HAL_GPIO_WritePin>
     RED(0);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <ledtrstr+0x1f8>)
 8000e5a:	f001 fbb2 	bl	80025c2 <HAL_GPIO_WritePin>
     for (int i = 0; i < 200; i++){
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	e009      	b.n	8000e78 <ledtrstr+0x154>
      HAL_Delay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 fcb1 	bl	80017cc <HAL_Delay>
      if (mainmenu != 2){
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <ledtrstr+0x204>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d106      	bne.n	8000e80 <ledtrstr+0x15c>
     for (int i = 0; i < 200; i++){
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3301      	adds	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2bc7      	cmp	r3, #199	; 0xc7
 8000e7c:	ddf2      	ble.n	8000e64 <ledtrstr+0x140>
 8000e7e:	e000      	b.n	8000e82 <ledtrstr+0x15e>
       break;
 8000e80:	bf00      	nop
    for (int i = 0; i < 3; i++){
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	ddb6      	ble.n	8000dfc <ledtrstr+0xd8>
   trainconnow = 2;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <ledtrstr+0x1ec>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]
   break;
 8000e94:	e037      	b.n	8000f06 <ledtrstr+0x1e2>
   switch (traincolortype){
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <ledtrstr+0x200>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d832      	bhi.n	8000f04 <ledtrstr+0x1e0>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <ledtrstr+0x180>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb9 	.word	0x08000eb9
 8000ea8:	08000ec7 	.word	0x08000ec7
 8000eac:	08000ed5 	.word	0x08000ed5
 8000eb0:	08000ee3 	.word	0x08000ee3
 8000eb4:	08000ef1 	.word	0x08000ef1
     trsrt(15, 0, 0, 4);
 8000eb8:	2304      	movs	r3, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f7ff fe18 	bl	8000af4 <trsrt>
     break;
 8000ec4:	e01b      	b.n	8000efe <ledtrstr+0x1da>
     trsrt(6, 1, 0, 0);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fe11 	bl	8000af4 <trsrt>
     break;
 8000ed2:	e014      	b.n	8000efe <ledtrstr+0x1da>
     trsrt(8, 0, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2008      	movs	r0, #8
 8000edc:	f7ff fe0a 	bl	8000af4 <trsrt>
     break;
 8000ee0:	e00d      	b.n	8000efe <ledtrstr+0x1da>
     trsrt(10, 1, 1, 2);
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f7ff fe03 	bl	8000af4 <trsrt>
     break;
 8000eee:	e006      	b.n	8000efe <ledtrstr+0x1da>
     trsrt(13, 0, 0, 3);
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200d      	movs	r0, #13
 8000ef8:	f7ff fdfc 	bl	8000af4 <trsrt>
     break;
 8000efc:	bf00      	nop
   break;
 8000efe:	e001      	b.n	8000f04 <ledtrstr+0x1e0>
   break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <ledtrstr+0x1e2>
   break;
 8000f04:	bf00      	nop
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000007d 	.word	0x2000007d
 8000f14:	200000c2 	.word	0x200000c2
 8000f18:	200000b0 	.word	0x200000b0
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	200000ba 	.word	0x200000ba
 8000f24:	200000c1 	.word	0x200000c1
 8000f28:	20000001 	.word	0x20000001

08000f2c <allbtnfunc>:

void allbtnfunc (){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

 // f5
 if (!SW(5) && !nsw[5]){
 8000f30:	2120      	movs	r1, #32
 8000f32:	48a5      	ldr	r0, [pc, #660]	; (80011c8 <allbtnfunc+0x29c>)
 8000f34:	f001 fb2e 	bl	8002594 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 80d4 	bne.w	80010e8 <allbtnfunc+0x1bc>
 8000f40:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <allbtnfunc+0x2a0>)
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 80cc 	beq.w	80010e8 <allbtnfunc+0x1bc>
  BUZZER(1);
 8000f50:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <allbtnfunc+0x2a4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <allbtnfunc+0x36>
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	489d      	ldr	r0, [pc, #628]	; (80011d4 <allbtnfunc+0x2a8>)
 8000f5e:	f001 fb30 	bl	80025c2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f000 fc32 	bl	80017cc <HAL_Delay>
  BUZZER(0);
 8000f68:	4b99      	ldr	r3, [pc, #612]	; (80011d0 <allbtnfunc+0x2a4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <allbtnfunc+0x4e>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2102      	movs	r1, #2
 8000f74:	4897      	ldr	r0, [pc, #604]	; (80011d4 <allbtnfunc+0x2a8>)
 8000f76:	f001 fb24 	bl	80025c2 <HAL_GPIO_WritePin>
  switch (mainmenu){
 8000f7a:	4b97      	ldr	r3, [pc, #604]	; (80011d8 <allbtnfunc+0x2ac>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	f000 809b 	beq.w	80010ba <allbtnfunc+0x18e>
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	f300 80ac 	bgt.w	80010e2 <allbtnfunc+0x1b6>
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d002      	beq.n	8000f94 <allbtnfunc+0x68>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d07c      	beq.n	800108c <allbtnfunc+0x160>
 8000f92:	e0a6      	b.n	80010e2 <allbtnfunc+0x1b6>
   case 1:
    switch (menu){
 8000f94:	4b91      	ldr	r3, [pc, #580]	; (80011dc <allbtnfunc+0x2b0>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d069      	beq.n	8001070 <allbtnfunc+0x144>
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	dc6b      	bgt.n	8001078 <allbtnfunc+0x14c>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d002      	beq.n	8000faa <allbtnfunc+0x7e>
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d05f      	beq.n	8001068 <allbtnfunc+0x13c>
 8000fa8:	e066      	b.n	8001078 <allbtnfunc+0x14c>
     case 1:
      mainmenu = 2;
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <allbtnfunc+0x2ac>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	701a      	strb	r2, [r3, #0]
      LCD_SetCursor(0, 0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff f980 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("    MANUAL  MODE    ");
 8000fb8:	4889      	ldr	r0, [pc, #548]	; (80011e0 <allbtnfunc+0x2b4>)
 8000fba:	f7ff f9c3 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 1);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff f979 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("====================");
 8000fc6:	4887      	ldr	r0, [pc, #540]	; (80011e4 <allbtnfunc+0x2b8>)
 8000fc8:	f7ff f9bc 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 2);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff f972 	bl	80002b8 <LCD_SetCursor>
      LCD_Print("RED GRN BLU WHT DFCT");
 8000fd4:	4884      	ldr	r0, [pc, #528]	; (80011e8 <allbtnfunc+0x2bc>)
 8000fd6:	f7ff f9b5 	bl	8000344 <LCD_Print>
      LCD_SetCursor(0, 3);
 8000fda:	2103      	movs	r1, #3
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff f96b 	bl	80002b8 <LCD_SetCursor>
      sprintf(lcd_buffer, "%3lu", traincolor[0]);
 8000fe2:	4b82      	ldr	r3, [pc, #520]	; (80011ec <allbtnfunc+0x2c0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4981      	ldr	r1, [pc, #516]	; (80011f0 <allbtnfunc+0x2c4>)
 8000fea:	4882      	ldr	r0, [pc, #520]	; (80011f4 <allbtnfunc+0x2c8>)
 8000fec:	f002 f86a 	bl	80030c4 <siprintf>
      LCD_Print(lcd_buffer);
 8000ff0:	4880      	ldr	r0, [pc, #512]	; (80011f4 <allbtnfunc+0x2c8>)
 8000ff2:	f7ff f9a7 	bl	8000344 <LCD_Print>
      LCD_SetCursor(4, 3);
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f7ff f95d 	bl	80002b8 <LCD_SetCursor>
      sprintf(lcd_buffer, "%3lu", traincolor[1]);
 8000ffe:	4b7b      	ldr	r3, [pc, #492]	; (80011ec <allbtnfunc+0x2c0>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	461a      	mov	r2, r3
 8001004:	497a      	ldr	r1, [pc, #488]	; (80011f0 <allbtnfunc+0x2c4>)
 8001006:	487b      	ldr	r0, [pc, #492]	; (80011f4 <allbtnfunc+0x2c8>)
 8001008:	f002 f85c 	bl	80030c4 <siprintf>
      LCD_Print(lcd_buffer);
 800100c:	4879      	ldr	r0, [pc, #484]	; (80011f4 <allbtnfunc+0x2c8>)
 800100e:	f7ff f999 	bl	8000344 <LCD_Print>
      LCD_SetCursor(8, 3);
 8001012:	2103      	movs	r1, #3
 8001014:	2008      	movs	r0, #8
 8001016:	f7ff f94f 	bl	80002b8 <LCD_SetCursor>
      sprintf(lcd_buffer, "%3lu", traincolor[2]);
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <allbtnfunc+0x2c0>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	461a      	mov	r2, r3
 8001020:	4973      	ldr	r1, [pc, #460]	; (80011f0 <allbtnfunc+0x2c4>)
 8001022:	4874      	ldr	r0, [pc, #464]	; (80011f4 <allbtnfunc+0x2c8>)
 8001024:	f002 f84e 	bl	80030c4 <siprintf>
      LCD_Print(lcd_buffer);
 8001028:	4872      	ldr	r0, [pc, #456]	; (80011f4 <allbtnfunc+0x2c8>)
 800102a:	f7ff f98b 	bl	8000344 <LCD_Print>
      LCD_SetCursor(12, 3);
 800102e:	2103      	movs	r1, #3
 8001030:	200c      	movs	r0, #12
 8001032:	f7ff f941 	bl	80002b8 <LCD_SetCursor>
      sprintf(lcd_buffer, "%3lu", traincolor[3]);
 8001036:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <allbtnfunc+0x2c0>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	461a      	mov	r2, r3
 800103c:	496c      	ldr	r1, [pc, #432]	; (80011f0 <allbtnfunc+0x2c4>)
 800103e:	486d      	ldr	r0, [pc, #436]	; (80011f4 <allbtnfunc+0x2c8>)
 8001040:	f002 f840 	bl	80030c4 <siprintf>
      LCD_Print(lcd_buffer);
 8001044:	486b      	ldr	r0, [pc, #428]	; (80011f4 <allbtnfunc+0x2c8>)
 8001046:	f7ff f97d 	bl	8000344 <LCD_Print>
      LCD_SetCursor(16, 3);
 800104a:	2103      	movs	r1, #3
 800104c:	2010      	movs	r0, #16
 800104e:	f7ff f933 	bl	80002b8 <LCD_SetCursor>
      sprintf(lcd_buffer, "%4lu", traincolor[4]);
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <allbtnfunc+0x2c0>)
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	461a      	mov	r2, r3
 8001058:	4967      	ldr	r1, [pc, #412]	; (80011f8 <allbtnfunc+0x2cc>)
 800105a:	4866      	ldr	r0, [pc, #408]	; (80011f4 <allbtnfunc+0x2c8>)
 800105c:	f002 f832 	bl	80030c4 <siprintf>
      LCD_Print(lcd_buffer);
 8001060:	4864      	ldr	r0, [pc, #400]	; (80011f4 <allbtnfunc+0x2c8>)
 8001062:	f7ff f96f 	bl	8000344 <LCD_Print>
      break;
 8001066:	e007      	b.n	8001078 <allbtnfunc+0x14c>
     case 2:
      mainmenu = 3;
 8001068:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <allbtnfunc+0x2ac>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
      break;
 800106e:	e003      	b.n	8001078 <allbtnfunc+0x14c>
     case 3:
      mainmenu = 4;
 8001070:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <allbtnfunc+0x2ac>)
 8001072:	2204      	movs	r2, #4
 8001074:	701a      	strb	r2, [r3, #0]
      break;
 8001076:	bf00      	nop
    }
    traingo = 0;
 8001078:	4b60      	ldr	r3, [pc, #384]	; (80011fc <allbtnfunc+0x2d0>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    traincon = 0;
 800107e:	4b60      	ldr	r3, [pc, #384]	; (8001200 <allbtnfunc+0x2d4>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    trainconnow = 0;
 8001084:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <allbtnfunc+0x2d8>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    break;
 800108a:	e02a      	b.n	80010e2 <allbtnfunc+0x1b6>
   case 2:
    bkm1();
 800108c:	f7ff fdd6 	bl	8000c3c <bkm1>
    mainmenu = 1;
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <allbtnfunc+0x2ac>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
    brk = 1;
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <allbtnfunc+0x2dc>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    LCD_SetCursor(0, 2);
 800109c:	2102      	movs	r1, #2
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff f90a 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("[MANUAL            ]");
 80010a4:	4859      	ldr	r0, [pc, #356]	; (800120c <allbtnfunc+0x2e0>)
 80010a6:	f7ff f94d 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 3);
 80010aa:	2103      	movs	r1, #3
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff f903 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("                 1/3");
 80010b2:	4857      	ldr	r0, [pc, #348]	; (8001210 <allbtnfunc+0x2e4>)
 80010b4:	f7ff f946 	bl	8000344 <LCD_Print>
    break;
 80010b8:	e013      	b.n	80010e2 <allbtnfunc+0x1b6>
   case 4:
    bkm1();
 80010ba:	f7ff fdbf 	bl	8000c3c <bkm1>
    mainmenu = 1;
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <allbtnfunc+0x2ac>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
    LCD_SetCursor(0, 2);
 80010c4:	2102      	movs	r1, #2
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff f8f6 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("[SETTINGS          ]");
 80010cc:	4851      	ldr	r0, [pc, #324]	; (8001214 <allbtnfunc+0x2e8>)
 80010ce:	f7ff f939 	bl	8000344 <LCD_Print>
    LCD_SetCursor(0, 3);
 80010d2:	2103      	movs	r1, #3
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff f8ef 	bl	80002b8 <LCD_SetCursor>
    LCD_Print("                 3/3");
 80010da:	484f      	ldr	r0, [pc, #316]	; (8001218 <allbtnfunc+0x2ec>)
 80010dc:	f7ff f932 	bl	8000344 <LCD_Print>
    break;
 80010e0:	bf00      	nop
  }

  nsw[5] = 1;
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <allbtnfunc+0x2a0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	715a      	strb	r2, [r3, #5]
 }
 if (SW(5) && nsw[5]){
 80010e8:	2120      	movs	r1, #32
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <allbtnfunc+0x29c>)
 80010ec:	f001 fa52 	bl	8002594 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <allbtnfunc+0x1d8>
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <allbtnfunc+0x2a0>)
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <allbtnfunc+0x1d8>
  nsw[5] = 0;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <allbtnfunc+0x2a0>)
 8001100:	2200      	movs	r2, #0
 8001102:	715a      	strb	r2, [r3, #5]
 }
 // end f5

 // f4
 if (!SW(4) && !nsw[4]){
 8001104:	2110      	movs	r1, #16
 8001106:	4830      	ldr	r0, [pc, #192]	; (80011c8 <allbtnfunc+0x29c>)
 8001108:	f001 fa44 	bl	8002594 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 808e 	bne.w	8001230 <allbtnfunc+0x304>
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <allbtnfunc+0x2a0>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8086 	beq.w	8001230 <allbtnfunc+0x304>
  BUZZER(1);
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <allbtnfunc+0x2a4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d004      	beq.n	8001136 <allbtnfunc+0x20a>
 800112c:	2201      	movs	r2, #1
 800112e:	2102      	movs	r1, #2
 8001130:	4828      	ldr	r0, [pc, #160]	; (80011d4 <allbtnfunc+0x2a8>)
 8001132:	f001 fa46 	bl	80025c2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f000 fb48 	bl	80017cc <HAL_Delay>
  BUZZER(0);
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <allbtnfunc+0x2a4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <allbtnfunc+0x222>
 8001144:	2200      	movs	r2, #0
 8001146:	2102      	movs	r1, #2
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <allbtnfunc+0x2a8>)
 800114a:	f001 fa3a 	bl	80025c2 <HAL_GPIO_WritePin>
  switch (mainmenu){
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <allbtnfunc+0x2ac>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d028      	beq.n	80011a8 <allbtnfunc+0x27c>
 8001156:	2b04      	cmp	r3, #4
 8001158:	dc67      	bgt.n	800122a <allbtnfunc+0x2fe>
 800115a:	2b01      	cmp	r3, #1
 800115c:	d002      	beq.n	8001164 <allbtnfunc+0x238>
 800115e:	2b02      	cmp	r3, #2
 8001160:	d00e      	beq.n	8001180 <allbtnfunc+0x254>
 8001162:	e062      	b.n	800122a <allbtnfunc+0x2fe>
   case 1:
    menu++;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <allbtnfunc+0x2b0>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <allbtnfunc+0x2b0>)
 800116e:	701a      	strb	r2, [r3, #0]
    if (menu == 4){
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <allbtnfunc+0x2b0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d157      	bne.n	8001228 <allbtnfunc+0x2fc>
     menu = 1;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <allbtnfunc+0x2b0>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800117e:	e053      	b.n	8001228 <allbtnfunc+0x2fc>
   case 2:
    switch (trainconnow){
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <allbtnfunc+0x2d8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10d      	bne.n	80011a4 <allbtnfunc+0x278>
     case 1:
      traincolortype = 4;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <allbtnfunc+0x2f0>)
 800118a:	2204      	movs	r2, #4
 800118c:	701a      	strb	r2, [r3, #0]
      RED(0);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <allbtnfunc+0x2a8>)
 8001194:	f001 fa15 	bl	80025c2 <HAL_GPIO_WritePin>
      GREEN(0);
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <allbtnfunc+0x2a8>)
 800119e:	f001 fa10 	bl	80025c2 <HAL_GPIO_WritePin>
      break;
 80011a2:	e000      	b.n	80011a6 <allbtnfunc+0x27a>
     default:
      break;
 80011a4:	bf00      	nop
    }
    break;
 80011a6:	e040      	b.n	800122a <allbtnfunc+0x2fe>
   case 4:
    switchpressed[4] = 0;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <allbtnfunc+0x2f4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	711a      	strb	r2, [r3, #4]
    if (settings == 2){
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <allbtnfunc+0x2f8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d103      	bne.n	80011be <allbtnfunc+0x292>
     settings = 1;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <allbtnfunc+0x2f8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
    }else{
     settings = 2;
    }
    break;
 80011bc:	e035      	b.n	800122a <allbtnfunc+0x2fe>
     settings = 2;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <allbtnfunc+0x2f8>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]
    break;
 80011c4:	e031      	b.n	800122a <allbtnfunc+0x2fe>
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800
 80011cc:	200000bc 	.word	0x200000bc
 80011d0:	200000b0 	.word	0x200000b0
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	20000001 	.word	0x20000001
 80011dc:	20000000 	.word	0x20000000
 80011e0:	08003c44 	.word	0x08003c44
 80011e4:	08003ba4 	.word	0x08003ba4
 80011e8:	08003c5c 	.word	0x08003c5c
 80011ec:	200000d8 	.word	0x200000d8
 80011f0:	08003b00 	.word	0x08003b00
 80011f4:	200000ec 	.word	0x200000ec
 80011f8:	08003b08 	.word	0x08003b08
 80011fc:	200000c2 	.word	0x200000c2
 8001200:	200000c3 	.word	0x200000c3
 8001204:	2000007d 	.word	0x2000007d
 8001208:	200000ba 	.word	0x200000ba
 800120c:	08003a70 	.word	0x08003a70
 8001210:	08003a88 	.word	0x08003a88
 8001214:	08003ad0 	.word	0x08003ad0
 8001218:	08003ae8 	.word	0x08003ae8
 800121c:	200000c1 	.word	0x200000c1
 8001220:	200000b4 	.word	0x200000b4
 8001224:	20000002 	.word	0x20000002
    break;
 8001228:	bf00      	nop
  }
  nsw[4] = 1;
 800122a:	4b9f      	ldr	r3, [pc, #636]	; (80014a8 <allbtnfunc+0x57c>)
 800122c:	2201      	movs	r2, #1
 800122e:	711a      	strb	r2, [r3, #4]
 }
 if (SW(4) && nsw[4]){
 8001230:	2110      	movs	r1, #16
 8001232:	489e      	ldr	r0, [pc, #632]	; (80014ac <allbtnfunc+0x580>)
 8001234:	f001 f9ae 	bl	8002594 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <allbtnfunc+0x320>
 800123e:	4b9a      	ldr	r3, [pc, #616]	; (80014a8 <allbtnfunc+0x57c>)
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <allbtnfunc+0x320>
  nsw[4] = 0;
 8001246:	4b98      	ldr	r3, [pc, #608]	; (80014a8 <allbtnfunc+0x57c>)
 8001248:	2200      	movs	r2, #0
 800124a:	711a      	strb	r2, [r3, #4]
 }
 // end f4

 // f3
 if (!SW(3) && !nsw[3]){
 800124c:	2108      	movs	r1, #8
 800124e:	4897      	ldr	r0, [pc, #604]	; (80014ac <allbtnfunc+0x580>)
 8001250:	f001 f9a0 	bl	8002594 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d158      	bne.n	800130c <allbtnfunc+0x3e0>
 800125a:	4b93      	ldr	r3, [pc, #588]	; (80014a8 <allbtnfunc+0x57c>)
 800125c:	78db      	ldrb	r3, [r3, #3]
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d051      	beq.n	800130c <allbtnfunc+0x3e0>
  BUZZER(1);
 8001268:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <allbtnfunc+0x584>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <allbtnfunc+0x34e>
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	488f      	ldr	r0, [pc, #572]	; (80014b4 <allbtnfunc+0x588>)
 8001276:	f001 f9a4 	bl	80025c2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f000 faa6 	bl	80017cc <HAL_Delay>
  BUZZER(0);
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <allbtnfunc+0x584>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <allbtnfunc+0x366>
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4889      	ldr	r0, [pc, #548]	; (80014b4 <allbtnfunc+0x588>)
 800128e:	f001 f998 	bl	80025c2 <HAL_GPIO_WritePin>
  switch (mainmenu){
 8001292:	4b89      	ldr	r3, [pc, #548]	; (80014b8 <allbtnfunc+0x58c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d028      	beq.n	80012ec <allbtnfunc+0x3c0>
 800129a:	2b04      	cmp	r3, #4
 800129c:	dc33      	bgt.n	8001306 <allbtnfunc+0x3da>
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d002      	beq.n	80012a8 <allbtnfunc+0x37c>
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d00e      	beq.n	80012c4 <allbtnfunc+0x398>
 80012a6:	e02e      	b.n	8001306 <allbtnfunc+0x3da>
   case 1:
    menu--;
 80012a8:	4b84      	ldr	r3, [pc, #528]	; (80014bc <allbtnfunc+0x590>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b82      	ldr	r3, [pc, #520]	; (80014bc <allbtnfunc+0x590>)
 80012b2:	701a      	strb	r2, [r3, #0]
    if (menu == 0){
 80012b4:	4b81      	ldr	r3, [pc, #516]	; (80014bc <allbtnfunc+0x590>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d123      	bne.n	8001304 <allbtnfunc+0x3d8>
     menu = 3;
 80012bc:	4b7f      	ldr	r3, [pc, #508]	; (80014bc <allbtnfunc+0x590>)
 80012be:	2203      	movs	r2, #3
 80012c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80012c2:	e01f      	b.n	8001304 <allbtnfunc+0x3d8>
   case 2:
    switch (trainconnow){
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <allbtnfunc+0x594>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10d      	bne.n	80012e8 <allbtnfunc+0x3bc>
     case 1:
      traincolortype = 3;
 80012cc:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <allbtnfunc+0x598>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	701a      	strb	r2, [r3, #0]
      RED(1);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2110      	movs	r1, #16
 80012d6:	4877      	ldr	r0, [pc, #476]	; (80014b4 <allbtnfunc+0x588>)
 80012d8:	f001 f973 	bl	80025c2 <HAL_GPIO_WritePin>
      GREEN(1);
 80012dc:	2200      	movs	r2, #0
 80012de:	2108      	movs	r1, #8
 80012e0:	4874      	ldr	r0, [pc, #464]	; (80014b4 <allbtnfunc+0x588>)
 80012e2:	f001 f96e 	bl	80025c2 <HAL_GPIO_WritePin>
      break;
 80012e6:	e000      	b.n	80012ea <allbtnfunc+0x3be>
     default:
      break;
 80012e8:	bf00      	nop
    }
    break;
 80012ea:	e00c      	b.n	8001306 <allbtnfunc+0x3da>
   case 4:
    if (settings == 1){
 80012ec:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <allbtnfunc+0x59c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d103      	bne.n	80012fc <allbtnfunc+0x3d0>
     settings = 2;
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <allbtnfunc+0x59c>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	701a      	strb	r2, [r3, #0]
    }else{
     settings = 1;
    }
    break;
 80012fa:	e004      	b.n	8001306 <allbtnfunc+0x3da>
     settings = 1;
 80012fc:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <allbtnfunc+0x59c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
    break;
 8001302:	e000      	b.n	8001306 <allbtnfunc+0x3da>
    break;
 8001304:	bf00      	nop
  }
  nsw[3] = 1;
 8001306:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <allbtnfunc+0x57c>)
 8001308:	2201      	movs	r2, #1
 800130a:	70da      	strb	r2, [r3, #3]
 }
 if (SW(3) && nsw[3]){
 800130c:	2108      	movs	r1, #8
 800130e:	4867      	ldr	r0, [pc, #412]	; (80014ac <allbtnfunc+0x580>)
 8001310:	f001 f940 	bl	8002594 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <allbtnfunc+0x3fc>
 800131a:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <allbtnfunc+0x57c>)
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <allbtnfunc+0x3fc>
  nsw[3] = 0;
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <allbtnfunc+0x57c>)
 8001324:	2200      	movs	r2, #0
 8001326:	70da      	strb	r2, [r3, #3]
 }
 // end f3

 // f2
 if (!SW(2) && !nsw[2]){
 8001328:	2104      	movs	r1, #4
 800132a:	4860      	ldr	r0, [pc, #384]	; (80014ac <allbtnfunc+0x580>)
 800132c:	f001 f932 	bl	8002594 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d171      	bne.n	800141a <allbtnfunc+0x4ee>
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <allbtnfunc+0x57c>)
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d06a      	beq.n	800141a <allbtnfunc+0x4ee>
  BUZZER(1);
 8001344:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <allbtnfunc+0x584>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <allbtnfunc+0x42a>
 800134c:	2201      	movs	r2, #1
 800134e:	2102      	movs	r1, #2
 8001350:	4858      	ldr	r0, [pc, #352]	; (80014b4 <allbtnfunc+0x588>)
 8001352:	f001 f936 	bl	80025c2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f000 fa38 	bl	80017cc <HAL_Delay>
  BUZZER(0);
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <allbtnfunc+0x584>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <allbtnfunc+0x442>
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	4852      	ldr	r0, [pc, #328]	; (80014b4 <allbtnfunc+0x588>)
 800136a:	f001 f92a 	bl	80025c2 <HAL_GPIO_WritePin>
  switch (mainmenu){
 800136e:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <allbtnfunc+0x58c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d002      	beq.n	800137c <allbtnfunc+0x450>
 8001376:	2b04      	cmp	r3, #4
 8001378:	d014      	beq.n	80013a4 <allbtnfunc+0x478>
 800137a:	e04b      	b.n	8001414 <allbtnfunc+0x4e8>
   case 2:
    switch (trainconnow){
 800137c:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <allbtnfunc+0x594>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10d      	bne.n	80013a0 <allbtnfunc+0x474>
     case 1:
      traincolortype = 2;
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <allbtnfunc+0x598>)
 8001386:	2202      	movs	r2, #2
 8001388:	701a      	strb	r2, [r3, #0]
      RED(0);
 800138a:	2201      	movs	r2, #1
 800138c:	2110      	movs	r1, #16
 800138e:	4849      	ldr	r0, [pc, #292]	; (80014b4 <allbtnfunc+0x588>)
 8001390:	f001 f917 	bl	80025c2 <HAL_GPIO_WritePin>
      GREEN(1);
 8001394:	2200      	movs	r2, #0
 8001396:	2108      	movs	r1, #8
 8001398:	4846      	ldr	r0, [pc, #280]	; (80014b4 <allbtnfunc+0x588>)
 800139a:	f001 f912 	bl	80025c2 <HAL_GPIO_WritePin>
      break;
 800139e:	e000      	b.n	80013a2 <allbtnfunc+0x476>
     default:
      break;
 80013a0:	bf00      	nop
    }
    break;
 80013a2:	e037      	b.n	8001414 <allbtnfunc+0x4e8>
   case 4:
    if (settings == 1 && HAL_GPIO_ReadPin(LCD_BL_GPIO_Port, LCD_BL_Pin) == 1){
 80013a4:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <allbtnfunc+0x59c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10a      	bne.n	80013c2 <allbtnfunc+0x496>
 80013ac:	2120      	movs	r1, #32
 80013ae:	4841      	ldr	r0, [pc, #260]	; (80014b4 <allbtnfunc+0x588>)
 80013b0:	f001 f8f0 	bl	8002594 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d103      	bne.n	80013c2 <allbtnfunc+0x496>
     LCD_SetBacklight(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7fe ffb0 	bl	8000320 <LCD_SetBacklight>
 80013c0:	e00d      	b.n	80013de <allbtnfunc+0x4b2>
    }else if (settings == 1
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <allbtnfunc+0x59c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d109      	bne.n	80013de <allbtnfunc+0x4b2>
      && HAL_GPIO_ReadPin(LCD_BL_GPIO_Port, LCD_BL_Pin) == 0){
 80013ca:	2120      	movs	r1, #32
 80013cc:	4839      	ldr	r0, [pc, #228]	; (80014b4 <allbtnfunc+0x588>)
 80013ce:	f001 f8e1 	bl	8002594 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <allbtnfunc+0x4b2>
     LCD_SetBacklight(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7fe ffa1 	bl	8000320 <LCD_SetBacklight>
    }
    if (settings == 2 && mute == 0){
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <allbtnfunc+0x59c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d10a      	bne.n	80013fc <allbtnfunc+0x4d0>
 80013e6:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <allbtnfunc+0x584>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <allbtnfunc+0x4d0>
     mute = 1;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <allbtnfunc+0x584>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
    }else if (settings == 2 && mute == 1){
     mute = 0;
    }
    break;
 80013fa:	e00a      	b.n	8001412 <allbtnfunc+0x4e6>
    }else if (settings == 2 && mute == 1){
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <allbtnfunc+0x59c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d106      	bne.n	8001412 <allbtnfunc+0x4e6>
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <allbtnfunc+0x584>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <allbtnfunc+0x4e6>
     mute = 0;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <allbtnfunc+0x584>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
    break;
 8001412:	bf00      	nop
  }
  nsw[2] = 1;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <allbtnfunc+0x57c>)
 8001416:	2201      	movs	r2, #1
 8001418:	709a      	strb	r2, [r3, #2]
 }
 if (SW(2) && nsw[2]){
 800141a:	2104      	movs	r1, #4
 800141c:	4823      	ldr	r0, [pc, #140]	; (80014ac <allbtnfunc+0x580>)
 800141e:	f001 f8b9 	bl	8002594 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <allbtnfunc+0x50a>
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <allbtnfunc+0x57c>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <allbtnfunc+0x50a>
  nsw[2] = 0;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <allbtnfunc+0x57c>)
 8001432:	2200      	movs	r2, #0
 8001434:	709a      	strb	r2, [r3, #2]
 }
 // endf2

 // f1
 if (!SW(1) && !nsw[1]){
 8001436:	2102      	movs	r1, #2
 8001438:	481c      	ldr	r0, [pc, #112]	; (80014ac <allbtnfunc+0x580>)
 800143a:	f001 f8ab 	bl	8002594 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d121      	bne.n	8001488 <allbtnfunc+0x55c>
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <allbtnfunc+0x57c>)
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <allbtnfunc+0x55c>
  switch (mainmenu){
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <allbtnfunc+0x58c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d113      	bne.n	8001482 <allbtnfunc+0x556>
   case 2:
    switch (trainconnow){
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <allbtnfunc+0x594>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10d      	bne.n	800147e <allbtnfunc+0x552>
     case 1:
      traincolortype = 1;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <allbtnfunc+0x598>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
      RED(1);
 8001468:	2200      	movs	r2, #0
 800146a:	2110      	movs	r1, #16
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <allbtnfunc+0x588>)
 800146e:	f001 f8a8 	bl	80025c2 <HAL_GPIO_WritePin>
      GREEN(0);
 8001472:	2201      	movs	r2, #1
 8001474:	2108      	movs	r1, #8
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <allbtnfunc+0x588>)
 8001478:	f001 f8a3 	bl	80025c2 <HAL_GPIO_WritePin>
      break;
 800147c:	e000      	b.n	8001480 <allbtnfunc+0x554>
     default:
      break;
 800147e:	bf00      	nop
    }
    break;
 8001480:	bf00      	nop
  }
  nsw[1] = 1;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <allbtnfunc+0x57c>)
 8001484:	2201      	movs	r2, #1
 8001486:	705a      	strb	r2, [r3, #1]
 }
 if (SW(1) && nsw[1]){
 8001488:	2102      	movs	r1, #2
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <allbtnfunc+0x580>)
 800148c:	f001 f882 	bl	8002594 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <allbtnfunc+0x578>
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <allbtnfunc+0x57c>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <allbtnfunc+0x578>
  nsw[1] = 0;
 800149e:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <allbtnfunc+0x57c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	705a      	strb	r2, [r3, #1]
 }
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000bc 	.word	0x200000bc
 80014ac:	40010800 	.word	0x40010800
 80014b0:	200000b0 	.word	0x200000b0
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	20000001 	.word	0x20000001
 80014bc:	20000000 	.word	0x20000000
 80014c0:	2000007d 	.word	0x2000007d
 80014c4:	200000c1 	.word	0x200000c1
 80014c8:	20000002 	.word	0x20000002

080014cc <adcvreader>:

u16 adcvreader (){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 u16 adcv = 100;
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	80fb      	strh	r3, [r7, #6]
 HAL_ADC_Start(&hadc1);
 80014d6:	480a      	ldr	r0, [pc, #40]	; (8001500 <adcvreader+0x34>)
 80014d8:	f000 fa74 	bl	80019c4 <HAL_ADC_Start>
 HAL_ADC_PollForConversion(&hadc1, 100);
 80014dc:	2164      	movs	r1, #100	; 0x64
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <adcvreader+0x34>)
 80014e0:	f000 fb4a 	bl	8001b78 <HAL_ADC_PollForConversion>
 adcv = +HAL_ADC_GetValue(&hadc1);
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <adcvreader+0x34>)
 80014e6:	f000 fc4d 	bl	8001d84 <HAL_ADC_GetValue>
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
 HAL_ADC_Stop(&hadc1);
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <adcvreader+0x34>)
 80014f0:	f000 fb16 	bl	8001b20 <HAL_ADC_Stop>
 return adcv;
 80014f4:	88fb      	ldrh	r3, [r7, #6]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000080 	.word	0x20000080

08001504 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1){
  LCD_Print("CERR");
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <Error_Handler+0x10>)
 800150e:	f7fe ff19 	bl	8000344 <LCD_Print>
 8001512:	e7fb      	b.n	800150c <Error_Handler+0x8>
 8001514:	08003c74 	.word	0x08003c74

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_MspInit+0x5c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_MspInit+0x5c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x60>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_MspInit+0x60>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000

0800157c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_ADC_MspInit+0x6c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d121      	bne.n	80015e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_ADC_MspInit+0x70>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <HAL_ADC_MspInit+0x70>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_MspInit+0x70>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_ADC_MspInit+0x70>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_ADC_MspInit+0x70>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_ADC_MspInit+0x70>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VR1_Pin;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VR1_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_ADC_MspInit+0x74>)
 80015dc:	f000 fe56 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40012400 	.word	0x40012400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f8ab 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f001 fd4e 	bl	8003114 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20005000 	.word	0x20005000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	20000110 	.word	0x20000110
 80016ac:	20000260 	.word	0x20000260

080016b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016bc:	f7ff fff8 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016c2:	490c      	ldr	r1, [pc, #48]	; (80016f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016d8:	4c09      	ldr	r4, [pc, #36]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f001 fd1b 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ea:	f7fe fe51 	bl	8000390 <main>
  bx lr
 80016ee:	4770      	bx	lr
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016f8:	08003cf8 	.word	0x08003cf8
  ldr r2, =_sbss
 80016fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001700:	20000260 	.word	0x20000260

08001704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_2_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x28>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x28>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 fd83 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fef8 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40022000 	.word	0x40022000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd8d 	bl	8002272 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 fd63 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000004 	.word	0x20000004
 800178c:	2000000c 	.word	0x2000000c
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x1c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x20>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <HAL_IncTick+0x20>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	20000114 	.word	0x20000114

080017b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_GetTick+0x10>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000114 	.word	0x20000114

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fff0 	bl	80017b8 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffe0 	bl	80017b8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0be      	b.n	80019b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fe92 	bl	800157c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fbf1 	bl	8002040 <ADC_ConversionStop_Disable>
 800185e:	4603      	mov	r3, r0
 8001860:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8099 	bne.w	80019a2 <HAL_ADC_Init+0x18e>
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8095 	bne.w	80019a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001880:	f023 0302 	bic.w	r3, r3, #2
 8001884:	f043 0202 	orr.w	r2, r3, #2
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001894:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7b1b      	ldrb	r3, [r3, #12]
 800189a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800189c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ac:	d003      	beq.n	80018b6 <HAL_ADC_Init+0xa2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_ADC_Init+0xa8>
 80018b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ba:	e000      	b.n	80018be <HAL_ADC_Init+0xaa>
 80018bc:	2300      	movs	r3, #0
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7d1b      	ldrb	r3, [r3, #20]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d119      	bne.n	8001900 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7b1b      	ldrb	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	3b01      	subs	r3, #1
 80018da:	035a      	lsls	r2, r3, #13
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f043 0220 	orr.w	r2, r3, #32
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_ADC_Init+0x1a8>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	430b      	orrs	r3, r1
 8001926:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001930:	d003      	beq.n	800193a <HAL_ADC_Init+0x126>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d104      	bne.n	8001944 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	3b01      	subs	r3, #1
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	430a      	orrs	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_ADC_Init+0x1ac>)
 8001960:	4013      	ands	r3, r2
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	429a      	cmp	r2, r3
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800197e:	e018      	b.n	80019b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f023 0312 	bic.w	r3, r3, #18
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a0:	e007      	b.n	80019b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	ffe1f7fd 	.word	0xffe1f7fd
 80019c0:	ff1f0efe 	.word	0xff1f0efe

080019c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Start+0x1a>
 80019da:	2302      	movs	r3, #2
 80019dc:	e098      	b.n	8001b10 <HAL_ADC_Start+0x14c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fad0 	bl	8001f8c <ADC_Enable>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8087 	bne.w	8001b06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a41      	ldr	r2, [pc, #260]	; (8001b18 <HAL_ADC_Start+0x154>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_Start+0x5e>
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_ADC_Start+0x158>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d026      	beq.n	8001a8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4c:	e01d      	b.n	8001a8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <HAL_ADC_Start+0x158>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Start+0xaa>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <HAL_ADC_Start+0x154>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10d      	bne.n	8001a8a <HAL_ADC_Start+0xc6>
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_ADC_Start+0x158>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f023 0206 	bic.w	r2, r3, #6
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa2:	e002      	b.n	8001aaa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0202 	mvn.w	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ac6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aca:	d113      	bne.n	8001af4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_ADC_Start+0x154>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_ADC_Start+0x158>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	e00c      	b.n	8001b0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e003      	b.n	8001b0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40012800 	.word	0x40012800
 8001b1c:	40012400 	.word	0x40012400

08001b20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_Stop+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e01a      	b.n	8001b70 <HAL_ADC_Stop+0x50>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fa7c 	bl	8002040 <ADC_ConversionStop_Disable>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b8e:	f7ff fe13 	bl	80017b8 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0d3      	b.n	8001d62 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d131      	bne.n	8001c2c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d12a      	bne.n	8001c2c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bd6:	e021      	b.n	8001c1c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bde:	d01d      	beq.n	8001c1c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x7e>
 8001be6:	f7ff fde7 	bl	80017b8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d212      	bcs.n	8001c1c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f043 0204 	orr.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0a2      	b.n	8001d62 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0d6      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c2a:	e070      	b.n	8001d0e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_ADC_PollForConversion+0x1f4>)
 8001c2e:	681c      	ldr	r4, [r3, #0]
 8001c30:	2002      	movs	r0, #2
 8001c32:	f001 f991 	bl	8002f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6919      	ldr	r1, [r3, #16]
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <HAL_ADC_PollForConversion+0x1f8>)
 8001c44:	400b      	ands	r3, r1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x104>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_ADC_PollForConversion+0x1fc>)
 8001c52:	400b      	ands	r3, r1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d111      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x104>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6919      	ldr	r1, [r3, #16]
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_ADC_PollForConversion+0x200>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x100>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68d9      	ldr	r1, [r3, #12]
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_ADC_PollForConversion+0x204>)
 8001c6e:	400b      	ands	r3, r1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x100>
 8001c74:	2314      	movs	r3, #20
 8001c76:	e020      	b.n	8001cba <HAL_ADC_PollForConversion+0x142>
 8001c78:	2329      	movs	r3, #41	; 0x29
 8001c7a:	e01e      	b.n	8001cba <HAL_ADC_PollForConversion+0x142>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_ADC_PollForConversion+0x200>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_ADC_PollForConversion+0x120>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_ADC_PollForConversion+0x204>)
 8001c92:	400b      	ands	r3, r1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <HAL_ADC_PollForConversion+0x13c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_ADC_PollForConversion+0x208>)
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x140>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_ADC_PollForConversion+0x208>)
 8001cae:	400b      	ands	r3, r1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x140>
 8001cb4:	2354      	movs	r3, #84	; 0x54
 8001cb6:	e000      	b.n	8001cba <HAL_ADC_PollForConversion+0x142>
 8001cb8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cc0:	e021      	b.n	8001d06 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d01a      	beq.n	8001d00 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x168>
 8001cd0:	f7ff fd72 	bl	80017b8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d20f      	bcs.n	8001d00 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d90b      	bls.n	8001d00 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e030      	b.n	8001d62 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d8d9      	bhi.n	8001cc2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0212 	mvn.w	r2, #18
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d32:	d115      	bne.n	8001d60 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d111      	bne.n	8001d60 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	24924924 	.word	0x24924924
 8001d74:	00924924 	.word	0x00924924
 8001d78:	12492492 	.word	0x12492492
 8001d7c:	00492492 	.word	0x00492492
 8001d80:	00249249 	.word	0x00249249

08001d84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x20>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0dc      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x1da>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d81c      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b05      	subs	r3, #5
 8001dde:	221f      	movs	r2, #31
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b05      	subs	r3, #5
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
 8001e04:	e03c      	b.n	8001e80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d81c      	bhi.n	8001e48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b23      	subs	r3, #35	; 0x23
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4019      	ands	r1, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b23      	subs	r3, #35	; 0x23
 8001e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
 8001e46:	e01b      	b.n	8001e80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b41      	subs	r3, #65	; 0x41
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4019      	ands	r1, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b41      	subs	r3, #65	; 0x41
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d91c      	bls.n	8001ec2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	3b1e      	subs	r3, #30
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6898      	ldr	r0, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b1e      	subs	r3, #30
 8001eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	e019      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6919      	ldr	r1, [r3, #16]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4019      	ands	r1, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6898      	ldr	r0, [r3, #8]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	fa00 f203 	lsl.w	r2, r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d132      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d125      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d126      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d11a      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9a      	lsrs	r2, r3, #18
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f9      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x1b2>
 8001f5a:	e007      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40012400 	.word	0x40012400
 8001f84:	20000004 	.word	0x20000004
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d040      	beq.n	800202c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <ADC_Enable+0xac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <ADC_Enable+0xb0>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fc8:	e002      	b.n	8001fd0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fd6:	f7ff fbef 	bl	80017b8 <HAL_GetTick>
 8001fda:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	e01f      	b.n	800201e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fde:	f7ff fbeb 	bl	80017b8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d918      	bls.n	800201e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d011      	beq.n	800201e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e007      	b.n	800202e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d1d8      	bne.n	8001fde <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000004 	.word	0x20000004
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12e      	bne.n	80020b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800206a:	f7ff fba5 	bl	80017b8 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002070:	e01b      	b.n	80020aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002072:	f7ff fba1 	bl	80017b8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d914      	bls.n	80020aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10d      	bne.n	80020aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e007      	b.n	80020ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d0dc      	beq.n	8002072 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f7ff ff90 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff49 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff5e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff90 	bl	800217c <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5f 	bl	8002128 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffb0 	bl	80021e0 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b08b      	sub	sp, #44	; 0x2c
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e169      	b.n	8002574 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a0:	2201      	movs	r2, #1
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 8158 	bne.w	800256e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a9a      	ldr	r2, [pc, #616]	; (800252c <HAL_GPIO_Init+0x2a0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d05e      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022c8:	4a98      	ldr	r2, [pc, #608]	; (800252c <HAL_GPIO_Init+0x2a0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d875      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022ce:	4a98      	ldr	r2, [pc, #608]	; (8002530 <HAL_GPIO_Init+0x2a4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d058      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022d4:	4a96      	ldr	r2, [pc, #600]	; (8002530 <HAL_GPIO_Init+0x2a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d86f      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022da:	4a96      	ldr	r2, [pc, #600]	; (8002534 <HAL_GPIO_Init+0x2a8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d052      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022e0:	4a94      	ldr	r2, [pc, #592]	; (8002534 <HAL_GPIO_Init+0x2a8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d869      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022e6:	4a94      	ldr	r2, [pc, #592]	; (8002538 <HAL_GPIO_Init+0x2ac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d04c      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022ec:	4a92      	ldr	r2, [pc, #584]	; (8002538 <HAL_GPIO_Init+0x2ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d863      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022f2:	4a92      	ldr	r2, [pc, #584]	; (800253c <HAL_GPIO_Init+0x2b0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d046      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022f8:	4a90      	ldr	r2, [pc, #576]	; (800253c <HAL_GPIO_Init+0x2b0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d85d      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d82a      	bhi.n	8002358 <HAL_GPIO_Init+0xcc>
 8002302:	2b12      	cmp	r3, #18
 8002304:	d859      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_GPIO_Init+0x80>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002387 	.word	0x08002387
 8002310:	08002361 	.word	0x08002361
 8002314:	08002373 	.word	0x08002373
 8002318:	080023b5 	.word	0x080023b5
 800231c:	080023bb 	.word	0x080023bb
 8002320:	080023bb 	.word	0x080023bb
 8002324:	080023bb 	.word	0x080023bb
 8002328:	080023bb 	.word	0x080023bb
 800232c:	080023bb 	.word	0x080023bb
 8002330:	080023bb 	.word	0x080023bb
 8002334:	080023bb 	.word	0x080023bb
 8002338:	080023bb 	.word	0x080023bb
 800233c:	080023bb 	.word	0x080023bb
 8002340:	080023bb 	.word	0x080023bb
 8002344:	080023bb 	.word	0x080023bb
 8002348:	080023bb 	.word	0x080023bb
 800234c:	080023bb 	.word	0x080023bb
 8002350:	08002369 	.word	0x08002369
 8002354:	0800237d 	.word	0x0800237d
 8002358:	4a79      	ldr	r2, [pc, #484]	; (8002540 <HAL_GPIO_Init+0x2b4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800235e:	e02c      	b.n	80023ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	623b      	str	r3, [r7, #32]
          break;
 8002366:	e029      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	3304      	adds	r3, #4
 800236e:	623b      	str	r3, [r7, #32]
          break;
 8002370:	e024      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	3308      	adds	r3, #8
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e01f      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	330c      	adds	r3, #12
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e01a      	b.n	80023bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800238e:	2304      	movs	r3, #4
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e013      	b.n	80023bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	611a      	str	r2, [r3, #16]
          break;
 80023a6:	e009      	b.n	80023bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a8:	2308      	movs	r3, #8
 80023aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	615a      	str	r2, [r3, #20]
          break;
 80023b2:	e003      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x130>
          break;
 80023ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2bff      	cmp	r3, #255	; 0xff
 80023c0:	d801      	bhi.n	80023c6 <HAL_GPIO_Init+0x13a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	e001      	b.n	80023ca <HAL_GPIO_Init+0x13e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d802      	bhi.n	80023d8 <HAL_GPIO_Init+0x14c>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x152>
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	3b08      	subs	r3, #8
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	210f      	movs	r1, #15
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	431a      	orrs	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80b1 	beq.w	800256e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800240c:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002424:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_GPIO_Init+0x2bc>)
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	220f      	movs	r2, #15
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a40      	ldr	r2, [pc, #256]	; (800254c <HAL_GPIO_Init+0x2c0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_GPIO_Init+0x1ec>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3f      	ldr	r2, [pc, #252]	; (8002550 <HAL_GPIO_Init+0x2c4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_GPIO_Init+0x1e8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3e      	ldr	r2, [pc, #248]	; (8002554 <HAL_GPIO_Init+0x2c8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x1e4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <HAL_GPIO_Init+0x2cc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_GPIO_Init+0x1e0>
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 800246c:	2304      	movs	r3, #4
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002478:	2300      	movs	r3, #0
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800248a:	492f      	ldr	r1, [pc, #188]	; (8002548 <HAL_GPIO_Init+0x2bc>)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	492c      	ldr	r1, [pc, #176]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4928      	ldr	r1, [pc, #160]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	491e      	ldr	r1, [pc, #120]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4918      	ldr	r1, [pc, #96]	; (800255c <HAL_GPIO_Init+0x2d0>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_GPIO_Init+0x2d0>)
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	43db      	mvns	r3, r3
 800250a:	4914      	ldr	r1, [pc, #80]	; (800255c <HAL_GPIO_Init+0x2d0>)
 800250c:	4013      	ands	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_GPIO_Init+0x2d0>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_GPIO_Init+0x2d0>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e021      	b.n	800256e <HAL_GPIO_Init+0x2e2>
 800252a:	bf00      	nop
 800252c:	10320000 	.word	0x10320000
 8002530:	10310000 	.word	0x10310000
 8002534:	10220000 	.word	0x10220000
 8002538:	10210000 	.word	0x10210000
 800253c:	10120000 	.word	0x10120000
 8002540:	10110000 	.word	0x10110000
 8002544:	40021000 	.word	0x40021000
 8002548:	40010000 	.word	0x40010000
 800254c:	40010800 	.word	0x40010800
 8002550:	40010c00 	.word	0x40010c00
 8002554:	40011000 	.word	0x40011000
 8002558:	40011400 	.word	0x40011400
 800255c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4909      	ldr	r1, [pc, #36]	; (8002590 <HAL_GPIO_Init+0x304>)
 800256a:	4013      	ands	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	f47f ae8e 	bne.w	80022a0 <HAL_GPIO_Init+0x14>
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	372c      	adds	r7, #44	; 0x2c
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]
 80025ce:	4613      	mov	r3, r2
 80025d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d2:	787b      	ldrb	r3, [r7, #1]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	041a      	lsls	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e272      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00c      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d112      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d06c      	beq.n	8002720 <HAL_RCC_OscConfig+0x12c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d168      	bne.n	8002720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e24c      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x76>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f872 	bl	80017b8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f86e 	bl	80017b8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e200      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe4>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f85e 	bl	80017b8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f85a 	bl	80017b8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1ec      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x10c>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c0      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff f813 	bl	80017b8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7ff f80f 	bl	80017b8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4927      	ldr	r1, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fff2 	bl	80017b8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe ffee 	bl	80017b8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e180      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03a      	beq.n	8002878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe ffd2 	bl	80017b8 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe ffce 	bl	80017b8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e160      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 faba 	bl	8002db0 <RCC_Delay>
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe ffb8 	bl	80017b8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe ffb4 	bl	80017b8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e146      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	42420000 	.word	0x42420000
 8002868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e9      	bne.n	800284c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a6 	beq.w	80029d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe ff75 	bl	80017b8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe ff71 	bl	80017b8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e103      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02d      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x334>
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e01c      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x356>
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e00b      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe ff25 	bl	80017b8 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe ff21 	bl	80017b8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0b1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCC_OscConfig+0x37e>
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe ff0f 	bl	80017b8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe ff0b 	bl	80017b8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e09b      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8087 	beq.w	8002aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d061      	beq.n	8002aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d146      	bne.n	8002a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fedf 	bl	80017b8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fedb 	bl	80017b8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e06d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4921      	ldr	r1, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe feaf 	bl	80017b8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe feab 	bl	80017b8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
 8002a7c:	e035      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe98 	bl	80017b8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fe94 	bl	80017b8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x498>
 8002aaa:	e01e      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e019      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x500>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d0      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e073      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fde6 	bl	80017b8 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fde2 	bl	80017b8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e053      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d210      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fd44 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08003c7c 	.word	0x08003c7c
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	20000008 	.word	0x20000008

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x30>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x36>
 8002cfa:	e027      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfe:	613b      	str	r3, [r7, #16]
      break;
 8002d00:	e027      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	613b      	str	r3, [r7, #16]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	08003c94 	.word	0x08003c94
 8002d6c:	08003ca4 	.word	0x08003ca4
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003c8c 	.word	0x08003c8c

08002db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <RCC_Delay+0x34>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <RCC_Delay+0x38>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dcc:	bf00      	nop
  }
  while (Delay --);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <RCC_Delay+0x1c>
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000004 	.word	0x20000004
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d07d      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	61d3      	str	r3, [r2, #28]
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d118      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fcb4 	bl	80017b8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	e008      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe fcb0 	bl	80017b8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e06d      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02e      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d027      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fc7f 	bl	80017b8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fc7b 	bl	80017b8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e036      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420440 	.word	0x42420440

08002f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	f200 808a 	bhi.w	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d045      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d075      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f8e:	e082      	b.n	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d07b      	beq.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d015      	beq.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fba:	4b3c      	ldr	r3, [pc, #240]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0c5b      	lsrs	r3, r3, #17
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fd4:	4a38      	ldr	r2, [pc, #224]	; (80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4a34      	ldr	r2, [pc, #208]	; (80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffc:	d102      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	61bb      	str	r3, [r7, #24]
      break;
 8003002:	e04a      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
      break;
 8003012:	e042      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d108      	bne.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e01f      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d109      	bne.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003050:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e00f      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003062:	d11c      	bne.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d016      	beq.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003070:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003074:	61bb      	str	r3, [r7, #24]
      break;
 8003076:	e012      	b.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003078:	e011      	b.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800307a:	f7ff fe85 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0b9b      	lsrs	r3, r3, #14
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	61bb      	str	r3, [r7, #24]
      break;
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800309e:	bf00      	nop
    }
  }
  return (frequency);
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08003ca8 	.word	0x08003ca8
 80030b4:	08003cb8 	.word	0x08003cb8
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	003d0900 	.word	0x003d0900
 80030c0:	aaaaaaab 	.word	0xaaaaaaab

080030c4 <siprintf>:
 80030c4:	b40e      	push	{r1, r2, r3}
 80030c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030ca:	b500      	push	{lr}
 80030cc:	b09c      	sub	sp, #112	; 0x70
 80030ce:	ab1d      	add	r3, sp, #116	; 0x74
 80030d0:	9002      	str	r0, [sp, #8]
 80030d2:	9006      	str	r0, [sp, #24]
 80030d4:	9107      	str	r1, [sp, #28]
 80030d6:	9104      	str	r1, [sp, #16]
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <siprintf+0x38>)
 80030da:	4909      	ldr	r1, [pc, #36]	; (8003100 <siprintf+0x3c>)
 80030dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80030e0:	9105      	str	r1, [sp, #20]
 80030e2:	6800      	ldr	r0, [r0, #0]
 80030e4:	a902      	add	r1, sp, #8
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	f000 f98e 	bl	8003408 <_svfiprintf_r>
 80030ec:	2200      	movs	r2, #0
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	b01c      	add	sp, #112	; 0x70
 80030f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030f8:	b003      	add	sp, #12
 80030fa:	4770      	bx	lr
 80030fc:	2000005c 	.word	0x2000005c
 8003100:	ffff0208 	.word	0xffff0208

08003104 <memset>:
 8003104:	4603      	mov	r3, r0
 8003106:	4402      	add	r2, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000005c 	.word	0x2000005c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2600      	movs	r6, #0
 8003124:	4d0c      	ldr	r5, [pc, #48]	; (8003158 <__libc_init_array+0x38>)
 8003126:	4c0d      	ldr	r4, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	f000 fc7a 	bl	8003a28 <_init>
 8003134:	2600      	movs	r6, #0
 8003136:	4d0a      	ldr	r5, [pc, #40]	; (8003160 <__libc_init_array+0x40>)
 8003138:	4c0a      	ldr	r4, [pc, #40]	; (8003164 <__libc_init_array+0x44>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003cf0 	.word	0x08003cf0
 800315c:	08003cf0 	.word	0x08003cf0
 8003160:	08003cf0 	.word	0x08003cf0
 8003164:	08003cf4 	.word	0x08003cf4

08003168 <__retarget_lock_acquire_recursive>:
 8003168:	4770      	bx	lr

0800316a <__retarget_lock_release_recursive>:
 800316a:	4770      	bx	lr

0800316c <_free_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4605      	mov	r5, r0
 8003170:	2900      	cmp	r1, #0
 8003172:	d040      	beq.n	80031f6 <_free_r+0x8a>
 8003174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003178:	1f0c      	subs	r4, r1, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	bfb8      	it	lt
 800317e:	18e4      	addlt	r4, r4, r3
 8003180:	f000 f8dc 	bl	800333c <__malloc_lock>
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <_free_r+0x8c>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	b933      	cbnz	r3, 8003198 <_free_r+0x2c>
 800318a:	6063      	str	r3, [r4, #4]
 800318c:	6014      	str	r4, [r2, #0]
 800318e:	4628      	mov	r0, r5
 8003190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003194:	f000 b8d8 	b.w	8003348 <__malloc_unlock>
 8003198:	42a3      	cmp	r3, r4
 800319a:	d908      	bls.n	80031ae <_free_r+0x42>
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	1821      	adds	r1, r4, r0
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf01      	itttt	eq
 80031a4:	6819      	ldreq	r1, [r3, #0]
 80031a6:	685b      	ldreq	r3, [r3, #4]
 80031a8:	1809      	addeq	r1, r1, r0
 80031aa:	6021      	streq	r1, [r4, #0]
 80031ac:	e7ed      	b.n	800318a <_free_r+0x1e>
 80031ae:	461a      	mov	r2, r3
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	b10b      	cbz	r3, 80031b8 <_free_r+0x4c>
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	d9fa      	bls.n	80031ae <_free_r+0x42>
 80031b8:	6811      	ldr	r1, [r2, #0]
 80031ba:	1850      	adds	r0, r2, r1
 80031bc:	42a0      	cmp	r0, r4
 80031be:	d10b      	bne.n	80031d8 <_free_r+0x6c>
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	4401      	add	r1, r0
 80031c4:	1850      	adds	r0, r2, r1
 80031c6:	4283      	cmp	r3, r0
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	d1e0      	bne.n	800318e <_free_r+0x22>
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4408      	add	r0, r1
 80031d2:	6010      	str	r0, [r2, #0]
 80031d4:	6053      	str	r3, [r2, #4]
 80031d6:	e7da      	b.n	800318e <_free_r+0x22>
 80031d8:	d902      	bls.n	80031e0 <_free_r+0x74>
 80031da:	230c      	movs	r3, #12
 80031dc:	602b      	str	r3, [r5, #0]
 80031de:	e7d6      	b.n	800318e <_free_r+0x22>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	1821      	adds	r1, r4, r0
 80031e4:	428b      	cmp	r3, r1
 80031e6:	bf01      	itttt	eq
 80031e8:	6819      	ldreq	r1, [r3, #0]
 80031ea:	685b      	ldreq	r3, [r3, #4]
 80031ec:	1809      	addeq	r1, r1, r0
 80031ee:	6021      	streq	r1, [r4, #0]
 80031f0:	6063      	str	r3, [r4, #4]
 80031f2:	6054      	str	r4, [r2, #4]
 80031f4:	e7cb      	b.n	800318e <_free_r+0x22>
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000258 	.word	0x20000258

080031fc <sbrk_aligned>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4e0e      	ldr	r6, [pc, #56]	; (8003238 <sbrk_aligned+0x3c>)
 8003200:	460c      	mov	r4, r1
 8003202:	6831      	ldr	r1, [r6, #0]
 8003204:	4605      	mov	r5, r0
 8003206:	b911      	cbnz	r1, 800320e <sbrk_aligned+0x12>
 8003208:	f000 fbaa 	bl	8003960 <_sbrk_r>
 800320c:	6030      	str	r0, [r6, #0]
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 fba5 	bl	8003960 <_sbrk_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d00a      	beq.n	8003230 <sbrk_aligned+0x34>
 800321a:	1cc4      	adds	r4, r0, #3
 800321c:	f024 0403 	bic.w	r4, r4, #3
 8003220:	42a0      	cmp	r0, r4
 8003222:	d007      	beq.n	8003234 <sbrk_aligned+0x38>
 8003224:	1a21      	subs	r1, r4, r0
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fb9a 	bl	8003960 <_sbrk_r>
 800322c:	3001      	adds	r0, #1
 800322e:	d101      	bne.n	8003234 <sbrk_aligned+0x38>
 8003230:	f04f 34ff 	mov.w	r4, #4294967295
 8003234:	4620      	mov	r0, r4
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	2000025c 	.word	0x2000025c

0800323c <_malloc_r>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	1ccd      	adds	r5, r1, #3
 8003242:	f025 0503 	bic.w	r5, r5, #3
 8003246:	3508      	adds	r5, #8
 8003248:	2d0c      	cmp	r5, #12
 800324a:	bf38      	it	cc
 800324c:	250c      	movcc	r5, #12
 800324e:	2d00      	cmp	r5, #0
 8003250:	4607      	mov	r7, r0
 8003252:	db01      	blt.n	8003258 <_malloc_r+0x1c>
 8003254:	42a9      	cmp	r1, r5
 8003256:	d905      	bls.n	8003264 <_malloc_r+0x28>
 8003258:	230c      	movs	r3, #12
 800325a:	2600      	movs	r6, #0
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4630      	mov	r0, r6
 8003260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003338 <_malloc_r+0xfc>
 8003268:	f000 f868 	bl	800333c <__malloc_lock>
 800326c:	f8d8 3000 	ldr.w	r3, [r8]
 8003270:	461c      	mov	r4, r3
 8003272:	bb5c      	cbnz	r4, 80032cc <_malloc_r+0x90>
 8003274:	4629      	mov	r1, r5
 8003276:	4638      	mov	r0, r7
 8003278:	f7ff ffc0 	bl	80031fc <sbrk_aligned>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	4604      	mov	r4, r0
 8003280:	d155      	bne.n	800332e <_malloc_r+0xf2>
 8003282:	f8d8 4000 	ldr.w	r4, [r8]
 8003286:	4626      	mov	r6, r4
 8003288:	2e00      	cmp	r6, #0
 800328a:	d145      	bne.n	8003318 <_malloc_r+0xdc>
 800328c:	2c00      	cmp	r4, #0
 800328e:	d048      	beq.n	8003322 <_malloc_r+0xe6>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	4631      	mov	r1, r6
 8003294:	4638      	mov	r0, r7
 8003296:	eb04 0903 	add.w	r9, r4, r3
 800329a:	f000 fb61 	bl	8003960 <_sbrk_r>
 800329e:	4581      	cmp	r9, r0
 80032a0:	d13f      	bne.n	8003322 <_malloc_r+0xe6>
 80032a2:	6821      	ldr	r1, [r4, #0]
 80032a4:	4638      	mov	r0, r7
 80032a6:	1a6d      	subs	r5, r5, r1
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7ff ffa7 	bl	80031fc <sbrk_aligned>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d037      	beq.n	8003322 <_malloc_r+0xe6>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	442b      	add	r3, r5
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	f8d8 3000 	ldr.w	r3, [r8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d038      	beq.n	8003332 <_malloc_r+0xf6>
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	42a2      	cmp	r2, r4
 80032c4:	d12b      	bne.n	800331e <_malloc_r+0xe2>
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e00f      	b.n	80032ec <_malloc_r+0xb0>
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	1b52      	subs	r2, r2, r5
 80032d0:	d41f      	bmi.n	8003312 <_malloc_r+0xd6>
 80032d2:	2a0b      	cmp	r2, #11
 80032d4:	d917      	bls.n	8003306 <_malloc_r+0xca>
 80032d6:	1961      	adds	r1, r4, r5
 80032d8:	42a3      	cmp	r3, r4
 80032da:	6025      	str	r5, [r4, #0]
 80032dc:	bf18      	it	ne
 80032de:	6059      	strne	r1, [r3, #4]
 80032e0:	6863      	ldr	r3, [r4, #4]
 80032e2:	bf08      	it	eq
 80032e4:	f8c8 1000 	streq.w	r1, [r8]
 80032e8:	5162      	str	r2, [r4, r5]
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	4638      	mov	r0, r7
 80032ee:	f104 060b 	add.w	r6, r4, #11
 80032f2:	f000 f829 	bl	8003348 <__malloc_unlock>
 80032f6:	f026 0607 	bic.w	r6, r6, #7
 80032fa:	1d23      	adds	r3, r4, #4
 80032fc:	1af2      	subs	r2, r6, r3
 80032fe:	d0ae      	beq.n	800325e <_malloc_r+0x22>
 8003300:	1b9b      	subs	r3, r3, r6
 8003302:	50a3      	str	r3, [r4, r2]
 8003304:	e7ab      	b.n	800325e <_malloc_r+0x22>
 8003306:	42a3      	cmp	r3, r4
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	d1dd      	bne.n	80032c8 <_malloc_r+0x8c>
 800330c:	f8c8 2000 	str.w	r2, [r8]
 8003310:	e7ec      	b.n	80032ec <_malloc_r+0xb0>
 8003312:	4623      	mov	r3, r4
 8003314:	6864      	ldr	r4, [r4, #4]
 8003316:	e7ac      	b.n	8003272 <_malloc_r+0x36>
 8003318:	4634      	mov	r4, r6
 800331a:	6876      	ldr	r6, [r6, #4]
 800331c:	e7b4      	b.n	8003288 <_malloc_r+0x4c>
 800331e:	4613      	mov	r3, r2
 8003320:	e7cc      	b.n	80032bc <_malloc_r+0x80>
 8003322:	230c      	movs	r3, #12
 8003324:	4638      	mov	r0, r7
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	f000 f80e 	bl	8003348 <__malloc_unlock>
 800332c:	e797      	b.n	800325e <_malloc_r+0x22>
 800332e:	6025      	str	r5, [r4, #0]
 8003330:	e7dc      	b.n	80032ec <_malloc_r+0xb0>
 8003332:	605b      	str	r3, [r3, #4]
 8003334:	deff      	udf	#255	; 0xff
 8003336:	bf00      	nop
 8003338:	20000258 	.word	0x20000258

0800333c <__malloc_lock>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__malloc_lock+0x8>)
 800333e:	f7ff bf13 	b.w	8003168 <__retarget_lock_acquire_recursive>
 8003342:	bf00      	nop
 8003344:	20000254 	.word	0x20000254

08003348 <__malloc_unlock>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__malloc_unlock+0x8>)
 800334a:	f7ff bf0e 	b.w	800316a <__retarget_lock_release_recursive>
 800334e:	bf00      	nop
 8003350:	20000254 	.word	0x20000254

08003354 <__ssputs_r>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	461f      	mov	r7, r3
 800335a:	688e      	ldr	r6, [r1, #8]
 800335c:	4682      	mov	sl, r0
 800335e:	42be      	cmp	r6, r7
 8003360:	460c      	mov	r4, r1
 8003362:	4690      	mov	r8, r2
 8003364:	680b      	ldr	r3, [r1, #0]
 8003366:	d82c      	bhi.n	80033c2 <__ssputs_r+0x6e>
 8003368:	898a      	ldrh	r2, [r1, #12]
 800336a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800336e:	d026      	beq.n	80033be <__ssputs_r+0x6a>
 8003370:	6965      	ldr	r5, [r4, #20]
 8003372:	6909      	ldr	r1, [r1, #16]
 8003374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003378:	eba3 0901 	sub.w	r9, r3, r1
 800337c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003380:	1c7b      	adds	r3, r7, #1
 8003382:	444b      	add	r3, r9
 8003384:	106d      	asrs	r5, r5, #1
 8003386:	429d      	cmp	r5, r3
 8003388:	bf38      	it	cc
 800338a:	461d      	movcc	r5, r3
 800338c:	0553      	lsls	r3, r2, #21
 800338e:	d527      	bpl.n	80033e0 <__ssputs_r+0x8c>
 8003390:	4629      	mov	r1, r5
 8003392:	f7ff ff53 	bl	800323c <_malloc_r>
 8003396:	4606      	mov	r6, r0
 8003398:	b360      	cbz	r0, 80033f4 <__ssputs_r+0xa0>
 800339a:	464a      	mov	r2, r9
 800339c:	6921      	ldr	r1, [r4, #16]
 800339e:	f000 fafd 	bl	800399c <memcpy>
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	6126      	str	r6, [r4, #16]
 80033b0:	444e      	add	r6, r9
 80033b2:	6026      	str	r6, [r4, #0]
 80033b4:	463e      	mov	r6, r7
 80033b6:	6165      	str	r5, [r4, #20]
 80033b8:	eba5 0509 	sub.w	r5, r5, r9
 80033bc:	60a5      	str	r5, [r4, #8]
 80033be:	42be      	cmp	r6, r7
 80033c0:	d900      	bls.n	80033c4 <__ssputs_r+0x70>
 80033c2:	463e      	mov	r6, r7
 80033c4:	4632      	mov	r2, r6
 80033c6:	4641      	mov	r1, r8
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	f000 faaf 	bl	800392c <memmove>
 80033ce:	2000      	movs	r0, #0
 80033d0:	68a3      	ldr	r3, [r4, #8]
 80033d2:	1b9b      	subs	r3, r3, r6
 80033d4:	60a3      	str	r3, [r4, #8]
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	4433      	add	r3, r6
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	462a      	mov	r2, r5
 80033e2:	f000 fae9 	bl	80039b8 <_realloc_r>
 80033e6:	4606      	mov	r6, r0
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d1e0      	bne.n	80033ae <__ssputs_r+0x5a>
 80033ec:	4650      	mov	r0, sl
 80033ee:	6921      	ldr	r1, [r4, #16]
 80033f0:	f7ff febc 	bl	800316c <_free_r>
 80033f4:	230c      	movs	r3, #12
 80033f6:	f8ca 3000 	str.w	r3, [sl]
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003404:	81a3      	strh	r3, [r4, #12]
 8003406:	e7e9      	b.n	80033dc <__ssputs_r+0x88>

08003408 <_svfiprintf_r>:
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	4698      	mov	r8, r3
 800340e:	898b      	ldrh	r3, [r1, #12]
 8003410:	4607      	mov	r7, r0
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	460d      	mov	r5, r1
 8003416:	4614      	mov	r4, r2
 8003418:	b09d      	sub	sp, #116	; 0x74
 800341a:	d50e      	bpl.n	800343a <_svfiprintf_r+0x32>
 800341c:	690b      	ldr	r3, [r1, #16]
 800341e:	b963      	cbnz	r3, 800343a <_svfiprintf_r+0x32>
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	f7ff ff0b 	bl	800323c <_malloc_r>
 8003426:	6028      	str	r0, [r5, #0]
 8003428:	6128      	str	r0, [r5, #16]
 800342a:	b920      	cbnz	r0, 8003436 <_svfiprintf_r+0x2e>
 800342c:	230c      	movs	r3, #12
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	e0d0      	b.n	80035d8 <_svfiprintf_r+0x1d0>
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	616b      	str	r3, [r5, #20]
 800343a:	2300      	movs	r3, #0
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	2320      	movs	r3, #32
 8003440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003444:	2330      	movs	r3, #48	; 0x30
 8003446:	f04f 0901 	mov.w	r9, #1
 800344a:	f8cd 800c 	str.w	r8, [sp, #12]
 800344e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80035f0 <_svfiprintf_r+0x1e8>
 8003452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003456:	4623      	mov	r3, r4
 8003458:	469a      	mov	sl, r3
 800345a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800345e:	b10a      	cbz	r2, 8003464 <_svfiprintf_r+0x5c>
 8003460:	2a25      	cmp	r2, #37	; 0x25
 8003462:	d1f9      	bne.n	8003458 <_svfiprintf_r+0x50>
 8003464:	ebba 0b04 	subs.w	fp, sl, r4
 8003468:	d00b      	beq.n	8003482 <_svfiprintf_r+0x7a>
 800346a:	465b      	mov	r3, fp
 800346c:	4622      	mov	r2, r4
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ff6f 	bl	8003354 <__ssputs_r>
 8003476:	3001      	adds	r0, #1
 8003478:	f000 80a9 	beq.w	80035ce <_svfiprintf_r+0x1c6>
 800347c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800347e:	445a      	add	r2, fp
 8003480:	9209      	str	r2, [sp, #36]	; 0x24
 8003482:	f89a 3000 	ldrb.w	r3, [sl]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a1 	beq.w	80035ce <_svfiprintf_r+0x1c6>
 800348c:	2300      	movs	r3, #0
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003496:	f10a 0a01 	add.w	sl, sl, #1
 800349a:	9304      	str	r3, [sp, #16]
 800349c:	9307      	str	r3, [sp, #28]
 800349e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a2:	931a      	str	r3, [sp, #104]	; 0x68
 80034a4:	4654      	mov	r4, sl
 80034a6:	2205      	movs	r2, #5
 80034a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ac:	4850      	ldr	r0, [pc, #320]	; (80035f0 <_svfiprintf_r+0x1e8>)
 80034ae:	f000 fa67 	bl	8003980 <memchr>
 80034b2:	9a04      	ldr	r2, [sp, #16]
 80034b4:	b9d8      	cbnz	r0, 80034ee <_svfiprintf_r+0xe6>
 80034b6:	06d0      	lsls	r0, r2, #27
 80034b8:	bf44      	itt	mi
 80034ba:	2320      	movmi	r3, #32
 80034bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034c0:	0711      	lsls	r1, r2, #28
 80034c2:	bf44      	itt	mi
 80034c4:	232b      	movmi	r3, #43	; 0x2b
 80034c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d015      	beq.n	80034fe <_svfiprintf_r+0xf6>
 80034d2:	4654      	mov	r4, sl
 80034d4:	2000      	movs	r0, #0
 80034d6:	f04f 0c0a 	mov.w	ip, #10
 80034da:	9a07      	ldr	r2, [sp, #28]
 80034dc:	4621      	mov	r1, r4
 80034de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e2:	3b30      	subs	r3, #48	; 0x30
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d94d      	bls.n	8003584 <_svfiprintf_r+0x17c>
 80034e8:	b1b0      	cbz	r0, 8003518 <_svfiprintf_r+0x110>
 80034ea:	9207      	str	r2, [sp, #28]
 80034ec:	e014      	b.n	8003518 <_svfiprintf_r+0x110>
 80034ee:	eba0 0308 	sub.w	r3, r0, r8
 80034f2:	fa09 f303 	lsl.w	r3, r9, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	46a2      	mov	sl, r4
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	e7d2      	b.n	80034a4 <_svfiprintf_r+0x9c>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	1d19      	adds	r1, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfbb      	ittet	lt
 800350a:	425b      	neglt	r3, r3
 800350c:	f042 0202 	orrlt.w	r2, r2, #2
 8003510:	9307      	strge	r3, [sp, #28]
 8003512:	9307      	strlt	r3, [sp, #28]
 8003514:	bfb8      	it	lt
 8003516:	9204      	strlt	r2, [sp, #16]
 8003518:	7823      	ldrb	r3, [r4, #0]
 800351a:	2b2e      	cmp	r3, #46	; 0x2e
 800351c:	d10c      	bne.n	8003538 <_svfiprintf_r+0x130>
 800351e:	7863      	ldrb	r3, [r4, #1]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d134      	bne.n	800358e <_svfiprintf_r+0x186>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	3402      	adds	r4, #2
 8003528:	1d1a      	adds	r2, r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9203      	str	r2, [sp, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	bfb8      	it	lt
 8003532:	f04f 33ff 	movlt.w	r3, #4294967295
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80035f4 <_svfiprintf_r+0x1ec>
 800353c:	2203      	movs	r2, #3
 800353e:	4650      	mov	r0, sl
 8003540:	7821      	ldrb	r1, [r4, #0]
 8003542:	f000 fa1d 	bl	8003980 <memchr>
 8003546:	b138      	cbz	r0, 8003558 <_svfiprintf_r+0x150>
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	9b04      	ldr	r3, [sp, #16]
 800354c:	eba0 000a 	sub.w	r0, r0, sl
 8003550:	4082      	lsls	r2, r0
 8003552:	4313      	orrs	r3, r2
 8003554:	3401      	adds	r4, #1
 8003556:	9304      	str	r3, [sp, #16]
 8003558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800355c:	2206      	movs	r2, #6
 800355e:	4826      	ldr	r0, [pc, #152]	; (80035f8 <_svfiprintf_r+0x1f0>)
 8003560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003564:	f000 fa0c 	bl	8003980 <memchr>
 8003568:	2800      	cmp	r0, #0
 800356a:	d038      	beq.n	80035de <_svfiprintf_r+0x1d6>
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <_svfiprintf_r+0x1f4>)
 800356e:	bb1b      	cbnz	r3, 80035b8 <_svfiprintf_r+0x1b0>
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	3307      	adds	r3, #7
 8003574:	f023 0307 	bic.w	r3, r3, #7
 8003578:	3308      	adds	r3, #8
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800357e:	4433      	add	r3, r6
 8003580:	9309      	str	r3, [sp, #36]	; 0x24
 8003582:	e768      	b.n	8003456 <_svfiprintf_r+0x4e>
 8003584:	460c      	mov	r4, r1
 8003586:	2001      	movs	r0, #1
 8003588:	fb0c 3202 	mla	r2, ip, r2, r3
 800358c:	e7a6      	b.n	80034dc <_svfiprintf_r+0xd4>
 800358e:	2300      	movs	r3, #0
 8003590:	f04f 0c0a 	mov.w	ip, #10
 8003594:	4619      	mov	r1, r3
 8003596:	3401      	adds	r4, #1
 8003598:	9305      	str	r3, [sp, #20]
 800359a:	4620      	mov	r0, r4
 800359c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a0:	3a30      	subs	r2, #48	; 0x30
 80035a2:	2a09      	cmp	r2, #9
 80035a4:	d903      	bls.n	80035ae <_svfiprintf_r+0x1a6>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0c6      	beq.n	8003538 <_svfiprintf_r+0x130>
 80035aa:	9105      	str	r1, [sp, #20]
 80035ac:	e7c4      	b.n	8003538 <_svfiprintf_r+0x130>
 80035ae:	4604      	mov	r4, r0
 80035b0:	2301      	movs	r3, #1
 80035b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80035b6:	e7f0      	b.n	800359a <_svfiprintf_r+0x192>
 80035b8:	ab03      	add	r3, sp, #12
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	462a      	mov	r2, r5
 80035be:	4638      	mov	r0, r7
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <_svfiprintf_r+0x1f8>)
 80035c2:	a904      	add	r1, sp, #16
 80035c4:	f3af 8000 	nop.w
 80035c8:	1c42      	adds	r2, r0, #1
 80035ca:	4606      	mov	r6, r0
 80035cc:	d1d6      	bne.n	800357c <_svfiprintf_r+0x174>
 80035ce:	89ab      	ldrh	r3, [r5, #12]
 80035d0:	065b      	lsls	r3, r3, #25
 80035d2:	f53f af2d 	bmi.w	8003430 <_svfiprintf_r+0x28>
 80035d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035d8:	b01d      	add	sp, #116	; 0x74
 80035da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035de:	ab03      	add	r3, sp, #12
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	462a      	mov	r2, r5
 80035e4:	4638      	mov	r0, r7
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <_svfiprintf_r+0x1f8>)
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	f000 f87d 	bl	80036e8 <_printf_i>
 80035ee:	e7eb      	b.n	80035c8 <_svfiprintf_r+0x1c0>
 80035f0:	08003cba 	.word	0x08003cba
 80035f4:	08003cc0 	.word	0x08003cc0
 80035f8:	08003cc4 	.word	0x08003cc4
 80035fc:	00000000 	.word	0x00000000
 8003600:	08003355 	.word	0x08003355

08003604 <_printf_common>:
 8003604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	4616      	mov	r6, r2
 800360a:	4699      	mov	r9, r3
 800360c:	688a      	ldr	r2, [r1, #8]
 800360e:	690b      	ldr	r3, [r1, #16]
 8003610:	4607      	mov	r7, r0
 8003612:	4293      	cmp	r3, r2
 8003614:	bfb8      	it	lt
 8003616:	4613      	movlt	r3, r2
 8003618:	6033      	str	r3, [r6, #0]
 800361a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800361e:	460c      	mov	r4, r1
 8003620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003624:	b10a      	cbz	r2, 800362a <_printf_common+0x26>
 8003626:	3301      	adds	r3, #1
 8003628:	6033      	str	r3, [r6, #0]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	0699      	lsls	r1, r3, #26
 800362e:	bf42      	ittt	mi
 8003630:	6833      	ldrmi	r3, [r6, #0]
 8003632:	3302      	addmi	r3, #2
 8003634:	6033      	strmi	r3, [r6, #0]
 8003636:	6825      	ldr	r5, [r4, #0]
 8003638:	f015 0506 	ands.w	r5, r5, #6
 800363c:	d106      	bne.n	800364c <_printf_common+0x48>
 800363e:	f104 0a19 	add.w	sl, r4, #25
 8003642:	68e3      	ldr	r3, [r4, #12]
 8003644:	6832      	ldr	r2, [r6, #0]
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	42ab      	cmp	r3, r5
 800364a:	dc2b      	bgt.n	80036a4 <_printf_common+0xa0>
 800364c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003650:	1e13      	subs	r3, r2, #0
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	bf18      	it	ne
 8003656:	2301      	movne	r3, #1
 8003658:	0692      	lsls	r2, r2, #26
 800365a:	d430      	bmi.n	80036be <_printf_common+0xba>
 800365c:	4649      	mov	r1, r9
 800365e:	4638      	mov	r0, r7
 8003660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d023      	beq.n	80036b2 <_printf_common+0xae>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	f003 0306 	and.w	r3, r3, #6
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf14      	ite	ne
 8003676:	2500      	movne	r5, #0
 8003678:	6833      	ldreq	r3, [r6, #0]
 800367a:	f04f 0600 	mov.w	r6, #0
 800367e:	bf08      	it	eq
 8003680:	68e5      	ldreq	r5, [r4, #12]
 8003682:	f104 041a 	add.w	r4, r4, #26
 8003686:	bf08      	it	eq
 8003688:	1aed      	subeq	r5, r5, r3
 800368a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800368e:	bf08      	it	eq
 8003690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003694:	4293      	cmp	r3, r2
 8003696:	bfc4      	itt	gt
 8003698:	1a9b      	subgt	r3, r3, r2
 800369a:	18ed      	addgt	r5, r5, r3
 800369c:	42b5      	cmp	r5, r6
 800369e:	d11a      	bne.n	80036d6 <_printf_common+0xd2>
 80036a0:	2000      	movs	r0, #0
 80036a2:	e008      	b.n	80036b6 <_printf_common+0xb2>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4652      	mov	r2, sl
 80036a8:	4649      	mov	r1, r9
 80036aa:	4638      	mov	r0, r7
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d103      	bne.n	80036ba <_printf_common+0xb6>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	3501      	adds	r5, #1
 80036bc:	e7c1      	b.n	8003642 <_printf_common+0x3e>
 80036be:	2030      	movs	r0, #48	; 0x30
 80036c0:	18e1      	adds	r1, r4, r3
 80036c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036cc:	4422      	add	r2, r4
 80036ce:	3302      	adds	r3, #2
 80036d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d4:	e7c2      	b.n	800365c <_printf_common+0x58>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4622      	mov	r2, r4
 80036da:	4649      	mov	r1, r9
 80036dc:	4638      	mov	r0, r7
 80036de:	47c0      	blx	r8
 80036e0:	3001      	adds	r0, #1
 80036e2:	d0e6      	beq.n	80036b2 <_printf_common+0xae>
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7d9      	b.n	800369c <_printf_common+0x98>

080036e8 <_printf_i>:
 80036e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	7e0f      	ldrb	r7, [r1, #24]
 80036ee:	4691      	mov	r9, r2
 80036f0:	2f78      	cmp	r7, #120	; 0x78
 80036f2:	4680      	mov	r8, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	469a      	mov	sl, r3
 80036f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036fe:	d807      	bhi.n	8003710 <_printf_i+0x28>
 8003700:	2f62      	cmp	r7, #98	; 0x62
 8003702:	d80a      	bhi.n	800371a <_printf_i+0x32>
 8003704:	2f00      	cmp	r7, #0
 8003706:	f000 80d5 	beq.w	80038b4 <_printf_i+0x1cc>
 800370a:	2f58      	cmp	r7, #88	; 0x58
 800370c:	f000 80c1 	beq.w	8003892 <_printf_i+0x1aa>
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003718:	e03a      	b.n	8003790 <_printf_i+0xa8>
 800371a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800371e:	2b15      	cmp	r3, #21
 8003720:	d8f6      	bhi.n	8003710 <_printf_i+0x28>
 8003722:	a101      	add	r1, pc, #4	; (adr r1, 8003728 <_printf_i+0x40>)
 8003724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003728:	08003781 	.word	0x08003781
 800372c:	08003795 	.word	0x08003795
 8003730:	08003711 	.word	0x08003711
 8003734:	08003711 	.word	0x08003711
 8003738:	08003711 	.word	0x08003711
 800373c:	08003711 	.word	0x08003711
 8003740:	08003795 	.word	0x08003795
 8003744:	08003711 	.word	0x08003711
 8003748:	08003711 	.word	0x08003711
 800374c:	08003711 	.word	0x08003711
 8003750:	08003711 	.word	0x08003711
 8003754:	0800389b 	.word	0x0800389b
 8003758:	080037c1 	.word	0x080037c1
 800375c:	08003855 	.word	0x08003855
 8003760:	08003711 	.word	0x08003711
 8003764:	08003711 	.word	0x08003711
 8003768:	080038bd 	.word	0x080038bd
 800376c:	08003711 	.word	0x08003711
 8003770:	080037c1 	.word	0x080037c1
 8003774:	08003711 	.word	0x08003711
 8003778:	08003711 	.word	0x08003711
 800377c:	0800385d 	.word	0x0800385d
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	602a      	str	r2, [r5, #0]
 8003788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800378c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003790:	2301      	movs	r3, #1
 8003792:	e0a0      	b.n	80038d6 <_printf_i+0x1ee>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	0607      	lsls	r7, r0, #24
 800379a:	f103 0104 	add.w	r1, r3, #4
 800379e:	6029      	str	r1, [r5, #0]
 80037a0:	d501      	bpl.n	80037a6 <_printf_i+0xbe>
 80037a2:	681e      	ldr	r6, [r3, #0]
 80037a4:	e003      	b.n	80037ae <_printf_i+0xc6>
 80037a6:	0646      	lsls	r6, r0, #25
 80037a8:	d5fb      	bpl.n	80037a2 <_printf_i+0xba>
 80037aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	da03      	bge.n	80037ba <_printf_i+0xd2>
 80037b2:	232d      	movs	r3, #45	; 0x2d
 80037b4:	4276      	negs	r6, r6
 80037b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ba:	230a      	movs	r3, #10
 80037bc:	4859      	ldr	r0, [pc, #356]	; (8003924 <_printf_i+0x23c>)
 80037be:	e012      	b.n	80037e6 <_printf_i+0xfe>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	1d19      	adds	r1, r3, #4
 80037c6:	6029      	str	r1, [r5, #0]
 80037c8:	0605      	lsls	r5, r0, #24
 80037ca:	d501      	bpl.n	80037d0 <_printf_i+0xe8>
 80037cc:	681e      	ldr	r6, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <_printf_i+0xee>
 80037d0:	0641      	lsls	r1, r0, #25
 80037d2:	d5fb      	bpl.n	80037cc <_printf_i+0xe4>
 80037d4:	881e      	ldrh	r6, [r3, #0]
 80037d6:	2f6f      	cmp	r7, #111	; 0x6f
 80037d8:	bf0c      	ite	eq
 80037da:	2308      	moveq	r3, #8
 80037dc:	230a      	movne	r3, #10
 80037de:	4851      	ldr	r0, [pc, #324]	; (8003924 <_printf_i+0x23c>)
 80037e0:	2100      	movs	r1, #0
 80037e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037e6:	6865      	ldr	r5, [r4, #4]
 80037e8:	2d00      	cmp	r5, #0
 80037ea:	bfa8      	it	ge
 80037ec:	6821      	ldrge	r1, [r4, #0]
 80037ee:	60a5      	str	r5, [r4, #8]
 80037f0:	bfa4      	itt	ge
 80037f2:	f021 0104 	bicge.w	r1, r1, #4
 80037f6:	6021      	strge	r1, [r4, #0]
 80037f8:	b90e      	cbnz	r6, 80037fe <_printf_i+0x116>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	d04b      	beq.n	8003896 <_printf_i+0x1ae>
 80037fe:	4615      	mov	r5, r2
 8003800:	fbb6 f1f3 	udiv	r1, r6, r3
 8003804:	fb03 6711 	mls	r7, r3, r1, r6
 8003808:	5dc7      	ldrb	r7, [r0, r7]
 800380a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800380e:	4637      	mov	r7, r6
 8003810:	42bb      	cmp	r3, r7
 8003812:	460e      	mov	r6, r1
 8003814:	d9f4      	bls.n	8003800 <_printf_i+0x118>
 8003816:	2b08      	cmp	r3, #8
 8003818:	d10b      	bne.n	8003832 <_printf_i+0x14a>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	07de      	lsls	r6, r3, #31
 800381e:	d508      	bpl.n	8003832 <_printf_i+0x14a>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	6861      	ldr	r1, [r4, #4]
 8003824:	4299      	cmp	r1, r3
 8003826:	bfde      	ittt	le
 8003828:	2330      	movle	r3, #48	; 0x30
 800382a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800382e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003832:	1b52      	subs	r2, r2, r5
 8003834:	6122      	str	r2, [r4, #16]
 8003836:	464b      	mov	r3, r9
 8003838:	4621      	mov	r1, r4
 800383a:	4640      	mov	r0, r8
 800383c:	f8cd a000 	str.w	sl, [sp]
 8003840:	aa03      	add	r2, sp, #12
 8003842:	f7ff fedf 	bl	8003604 <_printf_common>
 8003846:	3001      	adds	r0, #1
 8003848:	d14a      	bne.n	80038e0 <_printf_i+0x1f8>
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	b004      	add	sp, #16
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	f043 0320 	orr.w	r3, r3, #32
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	2778      	movs	r7, #120	; 0x78
 800385e:	4832      	ldr	r0, [pc, #200]	; (8003928 <_printf_i+0x240>)
 8003860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6829      	ldr	r1, [r5, #0]
 8003868:	061f      	lsls	r7, r3, #24
 800386a:	f851 6b04 	ldr.w	r6, [r1], #4
 800386e:	d402      	bmi.n	8003876 <_printf_i+0x18e>
 8003870:	065f      	lsls	r7, r3, #25
 8003872:	bf48      	it	mi
 8003874:	b2b6      	uxthmi	r6, r6
 8003876:	07df      	lsls	r7, r3, #31
 8003878:	bf48      	it	mi
 800387a:	f043 0320 	orrmi.w	r3, r3, #32
 800387e:	6029      	str	r1, [r5, #0]
 8003880:	bf48      	it	mi
 8003882:	6023      	strmi	r3, [r4, #0]
 8003884:	b91e      	cbnz	r6, 800388e <_printf_i+0x1a6>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	f023 0320 	bic.w	r3, r3, #32
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	2310      	movs	r3, #16
 8003890:	e7a6      	b.n	80037e0 <_printf_i+0xf8>
 8003892:	4824      	ldr	r0, [pc, #144]	; (8003924 <_printf_i+0x23c>)
 8003894:	e7e4      	b.n	8003860 <_printf_i+0x178>
 8003896:	4615      	mov	r5, r2
 8003898:	e7bd      	b.n	8003816 <_printf_i+0x12e>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	6826      	ldr	r6, [r4, #0]
 800389e:	1d18      	adds	r0, r3, #4
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	6028      	str	r0, [r5, #0]
 80038a4:	0635      	lsls	r5, r6, #24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	d501      	bpl.n	80038ae <_printf_i+0x1c6>
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	e002      	b.n	80038b4 <_printf_i+0x1cc>
 80038ae:	0670      	lsls	r0, r6, #25
 80038b0:	d5fb      	bpl.n	80038aa <_printf_i+0x1c2>
 80038b2:	8019      	strh	r1, [r3, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	4615      	mov	r5, r2
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	e7bc      	b.n	8003836 <_printf_i+0x14e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	2100      	movs	r1, #0
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	602a      	str	r2, [r5, #0]
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	4628      	mov	r0, r5
 80038ca:	f000 f859 	bl	8003980 <memchr>
 80038ce:	b108      	cbz	r0, 80038d4 <_printf_i+0x1ec>
 80038d0:	1b40      	subs	r0, r0, r5
 80038d2:	6060      	str	r0, [r4, #4]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	2300      	movs	r3, #0
 80038da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038de:	e7aa      	b.n	8003836 <_printf_i+0x14e>
 80038e0:	462a      	mov	r2, r5
 80038e2:	4649      	mov	r1, r9
 80038e4:	4640      	mov	r0, r8
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	47d0      	blx	sl
 80038ea:	3001      	adds	r0, #1
 80038ec:	d0ad      	beq.n	800384a <_printf_i+0x162>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	079b      	lsls	r3, r3, #30
 80038f2:	d413      	bmi.n	800391c <_printf_i+0x234>
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	4298      	cmp	r0, r3
 80038fa:	bfb8      	it	lt
 80038fc:	4618      	movlt	r0, r3
 80038fe:	e7a6      	b.n	800384e <_printf_i+0x166>
 8003900:	2301      	movs	r3, #1
 8003902:	4632      	mov	r2, r6
 8003904:	4649      	mov	r1, r9
 8003906:	4640      	mov	r0, r8
 8003908:	47d0      	blx	sl
 800390a:	3001      	adds	r0, #1
 800390c:	d09d      	beq.n	800384a <_printf_i+0x162>
 800390e:	3501      	adds	r5, #1
 8003910:	68e3      	ldr	r3, [r4, #12]
 8003912:	9903      	ldr	r1, [sp, #12]
 8003914:	1a5b      	subs	r3, r3, r1
 8003916:	42ab      	cmp	r3, r5
 8003918:	dcf2      	bgt.n	8003900 <_printf_i+0x218>
 800391a:	e7eb      	b.n	80038f4 <_printf_i+0x20c>
 800391c:	2500      	movs	r5, #0
 800391e:	f104 0619 	add.w	r6, r4, #25
 8003922:	e7f5      	b.n	8003910 <_printf_i+0x228>
 8003924:	08003ccb 	.word	0x08003ccb
 8003928:	08003cdc 	.word	0x08003cdc

0800392c <memmove>:
 800392c:	4288      	cmp	r0, r1
 800392e:	b510      	push	{r4, lr}
 8003930:	eb01 0402 	add.w	r4, r1, r2
 8003934:	d902      	bls.n	800393c <memmove+0x10>
 8003936:	4284      	cmp	r4, r0
 8003938:	4623      	mov	r3, r4
 800393a:	d807      	bhi.n	800394c <memmove+0x20>
 800393c:	1e43      	subs	r3, r0, #1
 800393e:	42a1      	cmp	r1, r4
 8003940:	d008      	beq.n	8003954 <memmove+0x28>
 8003942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800394a:	e7f8      	b.n	800393e <memmove+0x12>
 800394c:	4601      	mov	r1, r0
 800394e:	4402      	add	r2, r0
 8003950:	428a      	cmp	r2, r1
 8003952:	d100      	bne.n	8003956 <memmove+0x2a>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800395a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800395e:	e7f7      	b.n	8003950 <memmove+0x24>

08003960 <_sbrk_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	2300      	movs	r3, #0
 8003964:	4d05      	ldr	r5, [pc, #20]	; (800397c <_sbrk_r+0x1c>)
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd fe6a 	bl	8001644 <_sbrk>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_sbrk_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_sbrk_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000250 	.word	0x20000250

08003980 <memchr>:
 8003980:	4603      	mov	r3, r0
 8003982:	b510      	push	{r4, lr}
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	4402      	add	r2, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	d101      	bne.n	8003992 <memchr+0x12>
 800398e:	2000      	movs	r0, #0
 8003990:	e003      	b.n	800399a <memchr+0x1a>
 8003992:	7804      	ldrb	r4, [r0, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	428c      	cmp	r4, r1
 8003998:	d1f6      	bne.n	8003988 <memchr+0x8>
 800399a:	bd10      	pop	{r4, pc}

0800399c <memcpy>:
 800399c:	440a      	add	r2, r1
 800399e:	4291      	cmp	r1, r2
 80039a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a4:	d100      	bne.n	80039a8 <memcpy+0xc>
 80039a6:	4770      	bx	lr
 80039a8:	b510      	push	{r4, lr}
 80039aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039b4:	d1f9      	bne.n	80039aa <memcpy+0xe>
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <_realloc_r>:
 80039b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4680      	mov	r8, r0
 80039be:	4614      	mov	r4, r2
 80039c0:	460e      	mov	r6, r1
 80039c2:	b921      	cbnz	r1, 80039ce <_realloc_r+0x16>
 80039c4:	4611      	mov	r1, r2
 80039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ca:	f7ff bc37 	b.w	800323c <_malloc_r>
 80039ce:	b92a      	cbnz	r2, 80039dc <_realloc_r+0x24>
 80039d0:	f7ff fbcc 	bl	800316c <_free_r>
 80039d4:	4625      	mov	r5, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	f000 f81b 	bl	8003a16 <_malloc_usable_size_r>
 80039e0:	4284      	cmp	r4, r0
 80039e2:	4607      	mov	r7, r0
 80039e4:	d802      	bhi.n	80039ec <_realloc_r+0x34>
 80039e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039ea:	d812      	bhi.n	8003a12 <_realloc_r+0x5a>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fc24 	bl	800323c <_malloc_r>
 80039f4:	4605      	mov	r5, r0
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0ed      	beq.n	80039d6 <_realloc_r+0x1e>
 80039fa:	42bc      	cmp	r4, r7
 80039fc:	4622      	mov	r2, r4
 80039fe:	4631      	mov	r1, r6
 8003a00:	bf28      	it	cs
 8003a02:	463a      	movcs	r2, r7
 8003a04:	f7ff ffca 	bl	800399c <memcpy>
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f7ff fbae 	bl	800316c <_free_r>
 8003a10:	e7e1      	b.n	80039d6 <_realloc_r+0x1e>
 8003a12:	4635      	mov	r5, r6
 8003a14:	e7df      	b.n	80039d6 <_realloc_r+0x1e>

08003a16 <_malloc_usable_size_r>:
 8003a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a1a:	1f18      	subs	r0, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfbc      	itt	lt
 8003a20:	580b      	ldrlt	r3, [r1, r0]
 8003a22:	18c0      	addlt	r0, r0, r3
 8003a24:	4770      	bx	lr
	...

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
